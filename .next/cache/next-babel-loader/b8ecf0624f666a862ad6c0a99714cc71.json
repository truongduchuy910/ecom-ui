{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useMemo } from \"react\";\nimport { ApolloClient } from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { HttpLink } from \"@apollo/client/link/http\";\nimport { page } from \"../config/yensaodatquang.json\";\nimport { InMemoryCache, makeVar, gql } from \"@apollo/client\";\nimport { init } from \"./action\";\nexport const orderCountVar = makeVar(0);\nexport const newOrderVar = makeVar(false);\nexport const newOrderCountVar = makeVar();\nexport const customerVar = makeVar({\n  id: null\n});\nexport const refetchCustomer = makeVar(async () => {});\nexport let cache = new InMemoryCache();\nconst httpLink = new HttpLink({\n  uri: page.server + \"/admin/api\",\n  credentials: \"same-origin\"\n});\nconst authLink = setContext((_, {\n  headers\n}) => {\n  if (false) {\n    const token = localStorage.getItem(\"token\");\n    return {\n      headers: _objectSpread(_objectSpread({}, headers), {}, {\n        authorization: token ? `Bearer ${token}` : \"\"\n      })\n    };\n  }\n});\n\nfunction createApolloClient() {\n  return new ApolloClient({\n    ssrMode: true,\n    link: authLink.concat(httpLink),\n    cache\n  });\n}\n\nlet apolloClient;\nexport function initializeApollo(initialState = null) {\n  var _apolloClient2;\n\n  const _apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : createApolloClient();\n\n  if (initialState) {\n    _apolloClient.cache.restore(initialState);\n  }\n\n  if (true) return _apolloClient;\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n}\nexport function useApollo(initialState) {\n  const store = useMemo(() => {\n    init();\n    return initializeApollo(initialState);\n  }, [initialState]);\n  return store;\n}","map":null,"metadata":{},"sourceType":"module"}