{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query($seller: UserWhereInput) {\\n    allAttributes(where: { seller: $seller }) {\\n      id\\n      name\\n      url\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql, useQuery } from \"@apollo/client\";\nimport { Item } from \"./item\";\nimport { useContext, useState } from \"react\";\nimport { getErrorMessage } from \"../../lib/chip\";\nimport { Loading } from \"../src/Loading\";\nimport { IoIosOptions } from \"react-icons/io\";\nimport { SellerContext } from \"../src/SellerProvider\";\nvar GET_ATTRIBUTES = gql(_templateObject());\nexport function List(_ref) {\n  var attributes = _ref.attributes;\n  var theme = useContext(SellerContext);\n\n  var _useQuery = useQuery(GET_ATTRIBUTES, {\n    variables: {\n      seller: theme.seller\n    }\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error;\n\n  var _useState = useState(false),\n      open = _useState[0],\n      setOpen = _useState[1];\n\n  if (loading) return __jsx(Loading, null);\n  if (error) return __jsx(\"i\", {\n    color: \"danger\"\n  }, getErrorMessage(error));\n  var source = attributes ? attributes : data.allAttributes;\n  return !loading && data ? __jsx(\"div\", null, __jsx(\"h5\", {\n    style: theme.css.h5\n  }, __jsx(IoIosOptions, {\n    style: theme.css.iconHeader\n  }), \"Thu\\u1ED9c T\\xEDnh\"), __jsx(Item, {\n    attribute: {\n      id: \"all-attribute\",\n      name: \"Tất Cả\",\n      url: \"all\"\n    }\n  }), source === null || source === void 0 ? void 0 : source.slice(0, open ? source === null || source === void 0 ? void 0 : source.lenght : 7).map(function (attribute) {\n    return __jsx(Item, {\n      key: attribute.id,\n      attribute: attribute\n    });\n  }), (source === null || source === void 0 ? void 0 : source.length) > 7 ? open ? __jsx(\"a\", {\n    onClick: function onClick() {\n      return setOpen(false);\n    },\n    style: {\n      color: theme.primary\n    }\n  }, \"R\\xFAt g\\u1ECDn\") : __jsx(\"a\", {\n    onClick: function onClick() {\n      return setOpen(true);\n    },\n    style: {\n      color: theme.primary\n    }\n  }, \"Xem th\\xEAm\") : null) : null;\n}","map":null,"metadata":{},"sourceType":"module"}