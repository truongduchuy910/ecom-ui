{"ast":null,"code":"var _jsxFileName = \"/home/huy/apps/ecom-ui/components/Category/DropdownMenu.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { DropdownItem, DropdownMenu, DropdownToggle, UncontrolledDropdown } from \"reactstrap\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { getErrorMessage } from \"../../lib/chip\";\nimport { page } from \"../../config/index\";\nimport { Link } from \"../src/Link\";\nconst GET_CATEGORIES = gql`\n  query($seller: UserWhereInput) {\n    allCategories(where: { seller: $seller }) {\n      id\n      name\n      url\n    }\n  }\n`;\nexport function CategoriesDropdownMenu() {\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(GET_CATEGORIES, {\n    variables: {\n      seller: page.seller\n    }\n  });\n  if (error) return null;\n  if (loading) return null;\n  return __jsx(UncontrolledDropdown, {\n    nav: true,\n    inNavbar: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, __jsx(DropdownToggle, {\n    nav: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, \"Danh M\\u1EE5c\"), __jsx(DropdownMenu, {\n    right: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, data === null || data === void 0 ? void 0 : data.allCategories.map(category => __jsx(Link, {\n    key: category.id,\n    href: {\n      pathname: \"/products\",\n      query: {\n        category: category.url\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 11\n    }\n  }, __jsx(DropdownItem, {\n    href: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }, category.name)))));\n}","map":{"version":3,"sources":["/home/huy/apps/ecom-ui/components/Category/DropdownMenu.js"],"names":["DropdownItem","DropdownMenu","DropdownToggle","UncontrolledDropdown","gql","useQuery","getErrorMessage","page","Link","GET_CATEGORIES","CategoriesDropdownMenu","data","loading","error","variables","seller","allCategories","map","category","id","pathname","query","url","name"],"mappings":";;;AAAA,SACEA,YADF,EAEEC,YAFF,EAGEC,cAHF,EAIEC,oBAJF,QAKO,YALP;AAMA,SAASC,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AACA,SAASC,eAAT,QAAgC,gBAAhC;AACA,SAASC,IAAT,QAAqB,oBAArB;AAEA,SAASC,IAAT,QAAqB,aAArB;AACA,MAAMC,cAAc,GAAGL,GAAI;;;;;;;;CAA3B;AASA,OAAO,SAASM,sBAAT,GAAkC;AACvC,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA2BR,QAAQ,CAACI,cAAD,EAAiB;AACxDK,IAAAA,SAAS,EAAE;AAAEC,MAAAA,MAAM,EAAER,IAAI,CAACQ;AAAf;AAD6C,GAAjB,CAAzC;AAGA,MAAIF,KAAJ,EAAW,OAAO,IAAP;AACX,MAAID,OAAJ,EAAa,OAAO,IAAP;AAEb,SACE,MAAC,oBAAD;AAAsB,IAAA,GAAG,MAAzB;AAA0B,IAAA,QAAQ,MAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,cAAD;AAAgB,IAAA,GAAG,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE,MAAC,YAAD;AAAc,IAAA,KAAK,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,IADH,aACGA,IADH,uBACGA,IAAI,CAAEK,aAAN,CAAoBC,GAApB,CAAyBC,QAAD,IACvB,MAAC,IAAD;AACE,IAAA,GAAG,EAAEA,QAAQ,CAACC,EADhB;AAEE,IAAA,IAAI,EAAE;AAAEC,MAAAA,QAAQ,EAAE,WAAZ;AAAyBC,MAAAA,KAAK,EAAE;AAAEH,QAAAA,QAAQ,EAAEA,QAAQ,CAACI;AAArB;AAAhC,KAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIE,MAAC,YAAD;AAAc,IAAA,IAAI,EAAC,EAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuBJ,QAAQ,CAACK,IAAhC,CAJF,CADD,CADH,CAFF,CADF;AAeD","sourcesContent":["import {\n  DropdownItem,\n  DropdownMenu,\n  DropdownToggle,\n  UncontrolledDropdown,\n} from \"reactstrap\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { getErrorMessage } from \"../../lib/chip\";\nimport { page } from \"../../config/index\";\n\nimport { Link } from \"../src/Link\";\nconst GET_CATEGORIES = gql`\n  query($seller: UserWhereInput) {\n    allCategories(where: { seller: $seller }) {\n      id\n      name\n      url\n    }\n  }\n`;\nexport function CategoriesDropdownMenu() {\n  const { data, loading, error } = useQuery(GET_CATEGORIES, {\n    variables: { seller: page.seller },\n  });\n  if (error) return null;\n  if (loading) return null;\n\n  return (\n    <UncontrolledDropdown nav inNavbar>\n      <DropdownToggle nav>Danh Má»¥c</DropdownToggle>\n      <DropdownMenu right>\n        {data?.allCategories.map((category) => (\n          <Link\n            key={category.id}\n            href={{ pathname: \"/products\", query: { category: category.url } }}\n          >\n            <DropdownItem href=\"\">{category.name}</DropdownItem>\n          </Link>\n        ))}\n      </DropdownMenu>\n    </UncontrolledDropdown>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}