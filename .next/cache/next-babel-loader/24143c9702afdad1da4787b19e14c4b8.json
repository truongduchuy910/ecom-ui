{"ast":null,"code":"var _jsxFileName = \"/home/huy/apps/ecom-ui/components/Cart/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { gql, useQuery, useMutation } from \"@apollo/client\";\nimport { emptyCart } from \"../../apollo/action\";\nimport { customerVar, newOrderVar, newOrderCountVar } from \"../../apollo/client\";\nimport { Item as CartItem } from \"./item\";\nimport { List } from \"./list\";\nimport { useRouter } from \"next/router\";\nimport { page } from \"../../config/index\";\nimport { formatMoney, getErrorMessage } from \"../../lib/chip\";\nimport { Fragment } from \"react\";\nimport { css } from \"../src/css\";\nimport theme from \"../src/theme\";\nimport { Loading } from \"../src/Loading\";\nimport { Link } from \"../src/Link\";\nimport { List as Customer } from \"../Customer/CurrentCustomer\";\nexport const CART = gql`\n  query {\n    cartItems @client\n    user @client\n    customer @client\n  }\n`; // create orderItem\n\nexport const CREATE_ORDER_ITEMS = gql`\n  mutation($data: [OrderItemsCreateInput]) {\n    createOrderItems(data: $data) {\n      id\n    }\n  }\n`; // create Order\n\nexport const CREATE_ORDER = gql`\n  mutation(\n    $items: [OrderItemWhereUniqueInput]\n    $customer: CustomerWhereUniqueInput\n    $ofSeller: UserWhereUniqueInput\n    $total: Int\n  ) {\n    createOrder(\n      data: {\n        customer: { connect: $customer }\n        items: { connect: $items }\n        ofSeller: { connect: $ofSeller }\n        total: $total\n      }\n    ) {\n      id\n      seller {\n        id\n        name\n      }\n      items {\n        id\n        product {\n          image {\n            publicUrl\n          }\n          images {\n            file {\n              publicUrl\n            }\n          }\n          name\n        }\n        price\n        quantity\n        attributes {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\nexport const OrderItemsCreateInput = item => ({\n  data: {\n    product: {\n      connect: {\n        id: item.product.id\n      }\n    },\n    price: item.price,\n    quantity: item.quantity\n  }\n});\nexport const OrderItemsCreateInputs = (cartItems = []) => cartItems === null || cartItems === void 0 ? void 0 : cartItems.map(item => OrderItemsCreateInput(item));\nexport const order = async ({\n  createOrderItems,\n  createOrder,\n  dataOICI,\n  page,\n  customer,\n  sum\n}) => {\n  // create cart items\n  const {\n    data: dataCOI,\n    error\n  } = await createOrderItems({\n    variables: {\n      data: dataOICI\n    }\n  }); // creat cart and connect cart items\n\n  if (dataCOI.createOrderItems) {\n    let variables = {\n      items: dataCOI.createOrderItems.map(e => ({\n        id: e.id\n      })),\n      customer: {\n        id: customer.id\n      },\n      ofSeller: {\n        id: page.seller.id\n      },\n      total: sum\n    };\n\n    try {\n      const {\n        data: dataCreateOrder,\n        errors: ER\n      } = await createOrder({\n        variables\n      });\n      newOrderVar(true);\n      newOrderCountVar(true);\n      emptyCart();\n      router.push({\n        pathname: \"/order\"\n      });\n    } catch {}\n  }\n};\nexport function Cart() {\n  // query\n  const {\n    data: cartData,\n    loading,\n    error\n  } = useQuery(CART); // mutation\n\n  const [createOrderItems] = useMutation(CREATE_ORDER_ITEMS);\n  const [createOrder] = useMutation(CREATE_ORDER);\n  if (loading || error || !cartData) return __jsx(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 45\n    }\n  });\n  const {\n    customer,\n    cartItems,\n    user\n  } = cartData;\n  let sum = 0;\n  cartItems === null || cartItems === void 0 ? void 0 : cartItems.map(cartItem => {\n    sum += cartItem.price;\n  }); // create OrderItemsCreateInputs (GraphQL type)\n\n  let dataOICI = OrderItemsCreateInputs(cartItems);\n  dataOICI === null || dataOICI === void 0 ? void 0 : dataOICI.map(data => data.data.ofSeller = {\n    connect: {\n      id: page.seller.id\n    }\n  }); // function\n\n  return (user === null || user === void 0 ? void 0 : user.id) ? __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 5\n    }\n  }, __jsx(Customer, {\n    customer: customer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }\n  }), __jsx(List, {\n    cartItems: cartItems,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }\n  }), (dataOICI === null || dataOICI === void 0 ? void 0 : dataOICI.length) && user ? __jsx(\"button\", {\n    style: css.button,\n    onClick: () => {\n      order({\n        createOrderItems,\n        createOrder,\n        dataOICI,\n        page,\n        customer,\n        sum\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }\n  }, \"X\\xE1c nh\\u1EADn \\u0111\\u01A1n h\\xE0ng\") : null) : __jsx(\"div\", {\n    style: {\n      paddingBottom: theme.spacing(3)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 5\n    }\n  }, __jsx(Link, {\n    href: {\n      pathname: \"/signin\",\n      query: {\n        redirect: \"/cart\"\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }\n  }, \"B\\u1EA5m v\\xE0o \\u0111\\xE2y \\u0111\\u1EC3 \\u0111\\u0103ng nh\\u1EADp v\\xE0 ti\\u1EBFp t\\u1EE5c\"));\n}","map":{"version":3,"sources":["/home/huy/apps/ecom-ui/components/Cart/index.js"],"names":["gql","useQuery","useMutation","emptyCart","customerVar","newOrderVar","newOrderCountVar","Item","CartItem","List","useRouter","page","formatMoney","getErrorMessage","Fragment","css","theme","Loading","Link","Customer","CART","CREATE_ORDER_ITEMS","CREATE_ORDER","OrderItemsCreateInput","item","data","product","connect","id","price","quantity","OrderItemsCreateInputs","cartItems","map","order","createOrderItems","createOrder","dataOICI","customer","sum","dataCOI","error","variables","items","e","ofSeller","seller","total","dataCreateOrder","errors","ER","router","push","pathname","Cart","cartData","loading","user","cartItem","length","button","paddingBottom","spacing","query","redirect"],"mappings":";;;AAAA,SAASA,GAAT,EAAcC,QAAd,EAAwBC,WAAxB,QAA2C,gBAA3C;AAEA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SACEC,WADF,EAEEC,WAFF,EAGEC,gBAHF,QAIO,qBAJP;AAKA,SAASC,IAAI,IAAIC,QAAjB,QAAiC,QAAjC;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,IAAT,QAAqB,oBAArB;AAEA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,gBAA7C;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,GAAT,QAAoB,YAApB;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,SAASC,OAAT,QAAwB,gBAAxB;AACA,SAASC,IAAT,QAAqB,aAArB;AACA,SAAST,IAAI,IAAIU,QAAjB,QAAiC,6BAAjC;AACA,OAAO,MAAMC,IAAI,GAAGpB,GAAI;;;;;;CAAjB,C,CAOP;;AACA,OAAO,MAAMqB,kBAAkB,GAAGrB,GAAI;;;;;;CAA/B,C,CAQP;;AACA,OAAO,MAAMsB,YAAY,GAAGtB,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAzB;AA2CP,OAAO,MAAMuB,qBAAqB,GAAIC,IAAD,KAAW;AAC9CC,EAAAA,IAAI,EAAE;AACJC,IAAAA,OAAO,EAAE;AAAEC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,EAAE,EAAEJ,IAAI,CAACE,OAAL,CAAaE;AAAnB;AAAX,KADL;AAEJC,IAAAA,KAAK,EAAEL,IAAI,CAACK,KAFR;AAGJC,IAAAA,QAAQ,EAAEN,IAAI,CAACM;AAHX;AADwC,CAAX,CAA9B;AAOP,OAAO,MAAMC,sBAAsB,GAAG,CAACC,SAAS,GAAG,EAAb,KACpCA,SADoC,aACpCA,SADoC,uBACpCA,SAAS,CAAEC,GAAX,CAAgBT,IAAD,IAAUD,qBAAqB,CAACC,IAAD,CAA9C,CADK;AAGP,OAAO,MAAMU,KAAK,GAAG,OAAO;AAC1BC,EAAAA,gBAD0B;AAE1BC,EAAAA,WAF0B;AAG1BC,EAAAA,QAH0B;AAI1B1B,EAAAA,IAJ0B;AAK1B2B,EAAAA,QAL0B;AAM1BC,EAAAA;AAN0B,CAAP,KAOf;AACJ;AACA,QAAM;AAAEd,IAAAA,IAAI,EAAEe,OAAR;AAAiBC,IAAAA;AAAjB,MAA2B,MAAMN,gBAAgB,CAAC;AACtDO,IAAAA,SAAS,EAAE;AACTjB,MAAAA,IAAI,EAAEY;AADG;AAD2C,GAAD,CAAvD,CAFI,CAOJ;;AACA,MAAIG,OAAO,CAACL,gBAAZ,EAA8B;AAC5B,QAAIO,SAAS,GAAG;AACdC,MAAAA,KAAK,EAAEH,OAAO,CAACL,gBAAR,CAAyBF,GAAzB,CAA8BW,CAAD,KAAQ;AAC1ChB,QAAAA,EAAE,EAAEgB,CAAC,CAAChB;AADoC,OAAR,CAA7B,CADO;AAIdU,MAAAA,QAAQ,EAAE;AAAEV,QAAAA,EAAE,EAAEU,QAAQ,CAACV;AAAf,OAJI;AAKdiB,MAAAA,QAAQ,EAAE;AAAEjB,QAAAA,EAAE,EAAEjB,IAAI,CAACmC,MAAL,CAAYlB;AAAlB,OALI;AAMdmB,MAAAA,KAAK,EAAER;AANO,KAAhB;;AAQA,QAAI;AACF,YAAM;AAAEd,QAAAA,IAAI,EAAEuB,eAAR;AAAyBC,QAAAA,MAAM,EAAEC;AAAjC,UAAwC,MAAMd,WAAW,CAAC;AAC9DM,QAAAA;AAD8D,OAAD,CAA/D;AAGArC,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAC,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAH,MAAAA,SAAS;AACTgD,MAAAA,MAAM,CAACC,IAAP,CAAY;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OAAZ;AACD,KARD,CAQE,MAAM,CAAE;AACX;AACF,CAlCM;AAmCP,OAAO,SAASC,IAAT,GAAgB;AACrB;AACA,QAAM;AAAE7B,IAAAA,IAAI,EAAE8B,QAAR;AAAkBC,IAAAA,OAAlB;AAA2Bf,IAAAA;AAA3B,MAAqCxC,QAAQ,CAACmB,IAAD,CAAnD,CAFqB,CAGrB;;AACA,QAAM,CAACe,gBAAD,IAAqBjC,WAAW,CAACmB,kBAAD,CAAtC;AACA,QAAM,CAACe,WAAD,IAAgBlC,WAAW,CAACoB,YAAD,CAAjC;AAEA,MAAIkC,OAAO,IAAIf,KAAX,IAAoB,CAACc,QAAzB,EAAmC,OAAO,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AAEnC,QAAM;AAAEjB,IAAAA,QAAF;AAAYN,IAAAA,SAAZ;AAAuByB,IAAAA;AAAvB,MAAgCF,QAAtC;AACA,MAAIhB,GAAG,GAAG,CAAV;AACAP,EAAAA,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEC,GAAX,CAAgByB,QAAD,IAAc;AAC3BnB,IAAAA,GAAG,IAAImB,QAAQ,CAAC7B,KAAhB;AACD,GAFD,EAXqB,CAerB;;AACA,MAAIQ,QAAQ,GAAGN,sBAAsB,CAACC,SAAD,CAArC;AACAK,EAAAA,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEJ,GAAV,CACGR,IAAD,IAAWA,IAAI,CAACA,IAAL,CAAUoB,QAAV,GAAqB;AAAElB,IAAAA,OAAO,EAAE;AAAEC,MAAAA,EAAE,EAAEjB,IAAI,CAACmC,MAAL,CAAYlB;AAAlB;AAAX,GADlC,EAjBqB,CAqBrB;;AAEA,SAAO,CAAA6B,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAE7B,EAAN,IACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD;AAAU,IAAA,QAAQ,EAAEU,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,IAAD;AAAM,IAAA,SAAS,EAAEN,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGG,CAAAK,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEsB,MAAV,KAAoBF,IAApB,GACC;AACE,IAAA,KAAK,EAAE1C,GAAG,CAAC6C,MADb;AAEE,IAAA,OAAO,EAAE,MAAM;AACb1B,MAAAA,KAAK,CAAC;AACJC,QAAAA,gBADI;AAEJC,QAAAA,WAFI;AAGJC,QAAAA,QAHI;AAIJ1B,QAAAA,IAJI;AAKJ2B,QAAAA,QALI;AAMJC,QAAAA;AANI,OAAD,CAAL;AAQD,KAXH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CADD,GAgBG,IAnBN,CADK,GAuBL;AAAK,IAAA,KAAK,EAAE;AAAEsB,MAAAA,aAAa,EAAE7C,KAAK,CAAC8C,OAAN,CAAc,CAAd;AAAjB,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,IAAI,EAAE;AAAET,MAAAA,QAAQ,EAAE,SAAZ;AAAuBU,MAAAA,KAAK,EAAE;AAAEC,QAAAA,QAAQ,EAAE;AAAZ;AAA9B,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kGADF,CAvBF;AA6BD","sourcesContent":["import { gql, useQuery, useMutation } from \"@apollo/client\";\n\nimport { emptyCart } from \"../../apollo/action\";\nimport {\n  customerVar,\n  newOrderVar,\n  newOrderCountVar,\n} from \"../../apollo/client\";\nimport { Item as CartItem } from \"./item\";\nimport { List } from \"./list\";\nimport { useRouter } from \"next/router\";\nimport { page } from \"../../config/index\";\n\nimport { formatMoney, getErrorMessage } from \"../../lib/chip\";\nimport { Fragment } from \"react\";\nimport { css } from \"../src/css\";\nimport theme from \"../src/theme\";\nimport { Loading } from \"../src/Loading\";\nimport { Link } from \"../src/Link\";\nimport { List as Customer } from \"../Customer/CurrentCustomer\";\nexport const CART = gql`\n  query {\n    cartItems @client\n    user @client\n    customer @client\n  }\n`;\n// create orderItem\nexport const CREATE_ORDER_ITEMS = gql`\n  mutation($data: [OrderItemsCreateInput]) {\n    createOrderItems(data: $data) {\n      id\n    }\n  }\n`;\n\n// create Order\nexport const CREATE_ORDER = gql`\n  mutation(\n    $items: [OrderItemWhereUniqueInput]\n    $customer: CustomerWhereUniqueInput\n    $ofSeller: UserWhereUniqueInput\n    $total: Int\n  ) {\n    createOrder(\n      data: {\n        customer: { connect: $customer }\n        items: { connect: $items }\n        ofSeller: { connect: $ofSeller }\n        total: $total\n      }\n    ) {\n      id\n      seller {\n        id\n        name\n      }\n      items {\n        id\n        product {\n          image {\n            publicUrl\n          }\n          images {\n            file {\n              publicUrl\n            }\n          }\n          name\n        }\n        price\n        quantity\n        attributes {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\nexport const OrderItemsCreateInput = (item) => ({\n  data: {\n    product: { connect: { id: item.product.id } },\n    price: item.price,\n    quantity: item.quantity,\n  },\n});\nexport const OrderItemsCreateInputs = (cartItems = []) =>\n  cartItems?.map((item) => OrderItemsCreateInput(item));\n\nexport const order = async ({\n  createOrderItems,\n  createOrder,\n  dataOICI,\n  page,\n  customer,\n  sum,\n}) => {\n  // create cart items\n  const { data: dataCOI, error } = await createOrderItems({\n    variables: {\n      data: dataOICI,\n    },\n  });\n  // creat cart and connect cart items\n  if (dataCOI.createOrderItems) {\n    let variables = {\n      items: dataCOI.createOrderItems.map((e) => ({\n        id: e.id,\n      })),\n      customer: { id: customer.id },\n      ofSeller: { id: page.seller.id },\n      total: sum,\n    };\n    try {\n      const { data: dataCreateOrder, errors: ER } = await createOrder({\n        variables,\n      });\n      newOrderVar(true);\n      newOrderCountVar(true);\n      emptyCart();\n      router.push({ pathname: \"/order\" });\n    } catch {}\n  }\n};\nexport function Cart() {\n  // query\n  const { data: cartData, loading, error } = useQuery(CART);\n  // mutation\n  const [createOrderItems] = useMutation(CREATE_ORDER_ITEMS);\n  const [createOrder] = useMutation(CREATE_ORDER);\n\n  if (loading || error || !cartData) return <Loading />;\n\n  const { customer, cartItems, user } = cartData;\n  let sum = 0;\n  cartItems?.map((cartItem) => {\n    sum += cartItem.price;\n  });\n\n  // create OrderItemsCreateInputs (GraphQL type)\n  let dataOICI = OrderItemsCreateInputs(cartItems);\n  dataOICI?.map(\n    (data) => (data.data.ofSeller = { connect: { id: page.seller.id } })\n  );\n\n  // function\n\n  return user?.id ? (\n    <div>\n      <Customer customer={customer} />\n      <List cartItems={cartItems} />\n      {dataOICI?.length && user ? (\n        <button\n          style={css.button}\n          onClick={() => {\n            order({\n              createOrderItems,\n              createOrder,\n              dataOICI,\n              page,\n              customer,\n              sum,\n            });\n          }}\n        >\n          Xác nhận đơn hàng\n        </button>\n      ) : null}\n    </div>\n  ) : (\n    <div style={{ paddingBottom: theme.spacing(3) }}>\n      <Link href={{ pathname: \"/signin\", query: { redirect: \"/cart\" } }}>\n        Bấm vào đây để đăng nhập và tiếp tục\n      </Link>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}