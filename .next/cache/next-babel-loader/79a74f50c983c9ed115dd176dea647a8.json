{"ast":null,"code":"var _jsxFileName = \"/home/huy/apps/ecom-ui/components/Order/list.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { gql, useQuery, useApolloClient } from \"@apollo/client\";\nimport { getErrorMessage } from \"../../lib/chip\";\nimport { USER } from \"../../apollo/action\";\nimport { newOrderVar } from \"../../apollo/client\";\nimport { Item } from \"./item\";\nimport { Loading } from \"../src/Loading\";\nimport { useRouter } from \"next/router\";\nimport { route } from \"next/dist/next-server/server/router\";\nexport const GET_CART_ITEMS = gql`\n  query($id: ID) {\n    user @client\n    allOrders(orderBy: \"time_DESC\", where: { id: $id }) {\n      id\n      total\n      step\n      customer {\n        id\n        name\n        phone\n        address\n      }\n      items {\n        id\n        product {\n          name\n          url\n          image {\n            publicUrl\n          }\n          images {\n            file {\n              publicUrl\n            }\n          }\n        }\n        price\n        quantity\n        attributes {\n          id\n          name\n          url\n        }\n      }\n    }\n  }\n`;\nexport function List() {\n  var _router$query, _data$allOrders;\n\n  const router = useRouter();\n  const id = (_router$query = router.query) === null || _router$query === void 0 ? void 0 : _router$query.createOrderId;\n  console.log(id);\n  const client = useApolloClient();\n  const user = client.readQuery({\n    query: USER\n  });\n  const {\n    data,\n    loading,\n    error,\n    refetch\n  } = useQuery(GET_CART_ITEMS, {\n    variables: {\n      seller: {\n        id: user === null || user === void 0 ? void 0 : user.id\n      },\n      id\n    }\n  });\n  if (loading) return __jsx(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 23\n    }\n  });\n  if (error) return __jsx(\"i\", {\n    color: \"danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 21\n    }\n  }, getErrorMessage(error));\n  let allOrders = (data === null || data === void 0 ? void 0 : (_data$allOrders = data.allOrders) === null || _data$allOrders === void 0 ? void 0 : _data$allOrders.length) ? data === null || data === void 0 ? void 0 : data.allOrders : [];\n  const newOrder = newOrderVar();\n\n  if (newOrder) {\n    newOrderVar(false);\n\n    try {\n      refetch();\n    } catch {}\n  }\n\n  return allOrders.map(order => __jsx(Item, {\n    key: order.id,\n    order: order,\n    user: data.user,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }));\n}","map":{"version":3,"sources":["/home/huy/apps/ecom-ui/components/Order/list.js"],"names":["gql","useQuery","useApolloClient","getErrorMessage","USER","newOrderVar","Item","Loading","useRouter","route","GET_CART_ITEMS","List","router","id","query","createOrderId","console","log","client","user","readQuery","data","loading","error","refetch","variables","seller","allOrders","length","newOrder","map","order"],"mappings":";;;AAAA,SAASA,GAAT,EAAcC,QAAd,EAAwBC,eAAxB,QAA+C,gBAA/C;AACA,SAASC,eAAT,QAAgC,gBAAhC;AACA,SAASC,IAAT,QAAqB,qBAArB;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,OAAT,QAAwB,gBAAxB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,KAAT,QAAsB,qCAAtB;AACA,OAAO,MAAMC,cAAc,GAAGV,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAA3B;AAuCP,OAAO,SAASW,IAAT,GAAgB;AAAA;;AACrB,QAAMC,MAAM,GAAGJ,SAAS,EAAxB;AACA,QAAMK,EAAE,oBAAGD,MAAM,CAACE,KAAV,kDAAG,cAAcC,aAAzB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,EAAZ;AACA,QAAMK,MAAM,GAAGhB,eAAe,EAA9B;AACA,QAAMiB,IAAI,GAAGD,MAAM,CAACE,SAAP,CAAiB;AAAEN,IAAAA,KAAK,EAAEV;AAAT,GAAjB,CAAb;AACA,QAAM;AAAEiB,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA,KAAjB;AAAwBC,IAAAA;AAAxB,MAAoCvB,QAAQ,CAACS,cAAD,EAAiB;AACjEe,IAAAA,SAAS,EAAE;AAAEC,MAAAA,MAAM,EAAE;AAAEb,QAAAA,EAAE,EAAEM,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEN;AAAZ,OAAV;AAA4BA,MAAAA;AAA5B;AADsD,GAAjB,CAAlD;AAGA,MAAIS,OAAJ,EAAa,OAAO,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAG,IAAA,KAAK,EAAC,QAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmBpB,eAAe,CAACoB,KAAD,CAAlC,CAAP;AACX,MAAII,SAAS,GAAG,CAAAN,IAAI,SAAJ,IAAAA,IAAI,WAAJ,+BAAAA,IAAI,CAAEM,SAAN,oEAAiBC,MAAjB,IAA0BP,IAA1B,aAA0BA,IAA1B,uBAA0BA,IAAI,CAAEM,SAAhC,GAA4C,EAA5D;AACA,QAAME,QAAQ,GAAGxB,WAAW,EAA5B;;AACA,MAAIwB,QAAJ,EAAc;AACZxB,IAAAA,WAAW,CAAC,KAAD,CAAX;;AACA,QAAI;AACFmB,MAAAA,OAAO;AACR,KAFD,CAEE,MAAM,CAAE;AACX;;AAED,SAAOG,SAAS,CAACG,GAAV,CAAeC,KAAD,IACnB,MAAC,IAAD;AAAM,IAAA,GAAG,EAAEA,KAAK,CAAClB,EAAjB;AAAqB,IAAA,KAAK,EAAEkB,KAA5B;AAAmC,IAAA,IAAI,EAAEV,IAAI,CAACF,IAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADK,CAAP;AAGD","sourcesContent":["import { gql, useQuery, useApolloClient } from \"@apollo/client\";\nimport { getErrorMessage } from \"../../lib/chip\";\nimport { USER } from \"../../apollo/action\";\nimport { newOrderVar } from \"../../apollo/client\";\nimport { Item } from \"./item\";\nimport { Loading } from \"../src/Loading\";\nimport { useRouter } from \"next/router\";\nimport { route } from \"next/dist/next-server/server/router\";\nexport const GET_CART_ITEMS = gql`\n  query($id: ID) {\n    user @client\n    allOrders(orderBy: \"time_DESC\", where: { id: $id }) {\n      id\n      total\n      step\n      customer {\n        id\n        name\n        phone\n        address\n      }\n      items {\n        id\n        product {\n          name\n          url\n          image {\n            publicUrl\n          }\n          images {\n            file {\n              publicUrl\n            }\n          }\n        }\n        price\n        quantity\n        attributes {\n          id\n          name\n          url\n        }\n      }\n    }\n  }\n`;\n\nexport function List() {\n  const router = useRouter();\n  const id = router.query?.createOrderId;\n  console.log(id);\n  const client = useApolloClient();\n  const user = client.readQuery({ query: USER });\n  const { data, loading, error, refetch } = useQuery(GET_CART_ITEMS, {\n    variables: { seller: { id: user?.id }, id },\n  });\n  if (loading) return <Loading />;\n  if (error) return <i color=\"danger\">{getErrorMessage(error)}</i>;\n  let allOrders = data?.allOrders?.length ? data?.allOrders : [];\n  const newOrder = newOrderVar();\n  if (newOrder) {\n    newOrderVar(false);\n    try {\n      refetch();\n    } catch {}\n  }\n\n  return allOrders.map((order) => (\n    <Item key={order.id} order={order} user={data.user} />\n  ));\n}\n"]},"metadata":{},"sourceType":"module"}