{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { gql, useQuery, useMutation } from \"@apollo/client\";\nimport { emptyCart } from \"../../apollo/action\";\nimport { customerVar, newOrderVar, newOrderCountVar } from \"../../apollo/client\";\nimport { Item as CartItem } from \"./item\";\nimport { useRouter } from \"next/router\";\nimport { page } from \"../../config/yensaodatquang.json\";\nimport { formatMoney } from \"../../lib/chip\";\nimport { Fragment } from \"react\";\nexport const CART = gql`\n  query {\n    cartItems @client\n    customer @client\n  }\n`; // create orderItem\n\nexport const CREATE_ORDER_ITEMS = gql`\n  mutation($data: [OrderItemsCreateInput]) {\n    createOrderItems(data: $data) {\n      id\n    }\n  }\n`; // create Order\n\nexport const CREATE_ORDER = gql`\n  mutation(\n    $items: [OrderItemWhereUniqueInput]\n    $customer: CustomerWhereUniqueInput\n    $ofSeller: UserWhereUniqueInput\n    $total: Int\n  ) {\n    createOrder(\n      data: {\n        customer: { connect: $customer }\n        items: { connect: $items }\n        ofSeller: { connect: $ofSeller }\n        total: $total\n      }\n    ) {\n      id\n      seller {\n        id\n        name\n      }\n      items {\n        id\n        product {\n          image {\n            publicUrl\n          }\n          images {\n            file {\n              publicUrl\n            }\n          }\n          name\n        }\n        price\n        quantity\n        attributes {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n\nconst OrderItemsCreateInput = item => ({\n  data: {\n    product: {\n      connect: {\n        id: item.product.id\n      }\n    },\n    price: item.price,\n    quantity: item.quantity\n  }\n});\n\nconst OrderItemsCreateInputs = cartItems => cartItems.map(item => OrderItemsCreateInput(item));\n\nexport function List() {\n  var _dataCartItems$cartIt, _dataCartItems$cartIt2, _dataCartItems$cartIt3;\n\n  const {\n    data: dataCartItems,\n    loading,\n    error\n  } = useQuery(CART);\n  if (loading) return __jsx(Loading, null);\n  const [createOrderItems] = useMutation(CREATE_ORDER_ITEMS);\n  const [createOrder] = useMutation(CREATE_ORDER);\n  const router = useRouter();\n  const customer = dataCartItems === null || dataCartItems === void 0 ? void 0 : dataCartItems.customer;\n  console.log(customer);\n\n  const order = async e => {\n    e.preventDefault();\n    e.stopPropagation();\n    const dataOICI = OrderItemsCreateInputs(dataCartItems === null || dataCartItems === void 0 ? void 0 : dataCartItems.cartItems);\n\n    if ((dataOICI === null || dataOICI === void 0 ? void 0 : dataOICI.length) && (customer === null || customer === void 0 ? void 0 : customer.id)) {\n      dataOICI.map(data => data.data.ofSeller = {\n        connect: {\n          id: page.seller.id\n        }\n      });\n      const {\n        data: dataCreateOrderItems,\n        error\n      } = await createOrderItems({\n        variables: {\n          data: dataOICI\n        }\n      });\n\n      if (dataCreateOrderItems.createOrderItems) {\n        let variables = {\n          items: dataCreateOrderItems.createOrderItems.map(e => ({\n            id: e.id\n          })),\n          customer: {\n            id: customer.id\n          },\n          ofSeller: {\n            id: page.seller.id\n          },\n          total: sum\n        };\n\n        try {\n          const {\n            data: dataCreateOrder,\n            errors: ER\n          } = await createOrder({\n            variables\n          });\n          newOrderVar(true);\n          newOrderCountVar(true);\n          emptyCart();\n          router.push({\n            pathname: \"/order\"\n          });\n        } catch (error) {\n          console.log(error);\n        }\n      }\n    }\n  };\n\n  let sum = 0;\n  dataCartItems === null || dataCartItems === void 0 ? void 0 : (_dataCartItems$cartIt = dataCartItems.cartItems) === null || _dataCartItems$cartIt === void 0 ? void 0 : _dataCartItems$cartIt.map(cartItem => {\n    sum += cartItem.price;\n  });\n  return __jsx(\"div\", null, (customer === null || customer === void 0 ? void 0 : customer.id) ? __jsx(Fragment, null, __jsx(\"h5\", null, \"Th\\xF4ng Tin Ng\\u01B0\\u1EDDi Nh\\u1EADn\"), __jsx(\"a\", null, customer.name), __jsx(\"a\", null, customer.phone), __jsx(\"a\", null, customer.address)) : null, __jsx(\"h5\", null, \"T\\u1ED5ng\"), __jsx(\"p\", null, formatMoney(sum)), __jsx(\"button\", {\n    onClick: order\n  }, \"\\u0110\\u1EB7t H\\xE0ng\"), dataCartItems ? (dataCartItems === null || dataCartItems === void 0 ? void 0 : (_dataCartItems$cartIt2 = dataCartItems.cartItems) === null || _dataCartItems$cartIt2 === void 0 ? void 0 : _dataCartItems$cartIt2.length) === 0 ? __jsx(\"p\", null, \"B\\u1EA1n ch\\u01B0a ch\\u1ECDn s\\u1EA3n ph\\u1EA9m n\\xE0o!\") : dataCartItems === null || dataCartItems === void 0 ? void 0 : (_dataCartItems$cartIt3 = dataCartItems.cartItems) === null || _dataCartItems$cartIt3 === void 0 ? void 0 : _dataCartItems$cartIt3.map(cartItem => {\n    return __jsx(CartItem, {\n      key: cartItem.product.id,\n      cartItem: cartItem\n    });\n  }) : null);\n}","map":null,"metadata":{},"sourceType":"module"}