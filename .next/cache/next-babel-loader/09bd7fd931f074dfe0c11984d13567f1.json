{"ast":null,"code":"var _jsxFileName = \"/home/huy/apps/ecom-ui/components/Product/list.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect, Fragment } from \"react\";\nimport { gql, useQuery, rewriteURIForGET } from \"@apollo/client\";\nimport { useRouter, withRouter, Router } from \"next/router\";\nimport { Item as Product } from \"./item\";\nimport { Container, Row, Col, Spinner } from \"reactstrap\";\nimport { page } from \"../../config\";\nimport { toSlug } from \"../../lib/chip\";\nimport { Loading } from \"../../src/Loading\";\nconst GET_PRODUCTS = gql`\n  query(\n    $first: Int\n    $skip: Int\n    $attributes: AttributeGroupWhereInput\n    $category: String\n    $categories: [String]\n    $brand: BrandWhereInput\n    $orderBy: String\n    $suggestions: ProductSuggestionType\n    $seller: UserWhereInput\n    $sale_gt: Int\n    $price_from: Int\n    $price_to: Int\n    $keyword: String\n    $except: String\n  ) {\n    allProducts(\n      first: $first\n      skip: $skip\n      where: {\n        AND: [\n          { url_contains: $keyword }\n          { category: { OR: [{ url: $category }, { url_in: $categories }] } }\n          { brand: $brand }\n          { attributeGroups_some: $attributes }\n          { suggestions: $suggestions }\n          { seller: $seller }\n          { sale_gt: $sale_gt }\n          { price_gt: $price_from }\n          { price_lt: $price_to }\n          { url_not: $except }\n        ]\n      }\n      orderBy: $orderBy\n    ) {\n      id\n      name\n      image {\n        publicUrl\n      }\n      images {\n        file {\n          publicUrl\n        }\n      }\n      price\n      sale\n      attributeGroups {\n        id\n        name\n        attributes {\n          id\n          name\n          url\n        }\n      }\n      url\n    }\n  }\n`;\nexport const List = ({\n  first = 6,\n  skip = 0,\n  category,\n  categories,\n  brand = \"\",\n  attributes,\n  orderBy,\n  suggestions,\n  sale,\n  price_from = 0,\n  price_to,\n  sm,\n  md,\n  lg,\n  more = true,\n  search,\n  except\n}) => {\n  var _data$allProducts2;\n\n  let variables = {\n    first,\n    skip,\n    category,\n    categories,\n    brand: brand ? {\n      url_contains: brand\n    } : null,\n    attributes,\n    orderBy,\n    suggestions,\n    seller: page.seller,\n    price_from,\n    price_to: price_to ? price_to : 999999999,\n    except\n  };\n  if (search) variables.keyword = toSlug(search);\n  if (sale) variables.sale_gt = 0;\n  let {\n    data,\n    error,\n    loading,\n    fetchMore\n  } = useQuery(GET_PRODUCTS, {\n    variables\n  });\n\n  function loadingMore() {\n    var _data$allProducts;\n\n    const count = data === null || data === void 0 ? void 0 : (_data$allProducts = data.allProducts) === null || _data$allProducts === void 0 ? void 0 : _data$allProducts.length;\n    variables.skip = count;\n    fetchMore({\n      variables,\n      updateQuery: (prev, {\n        fetchMoreResult\n      }) => {\n        if (!fetchMoreResult) {\n          return prev;\n        }\n\n        return Object.assign({}, prev, {\n          allProducts: [...prev.allProducts, ...fetchMoreResult.allProducts]\n        });\n      }\n    });\n  }\n\n  if (error) return __jsx(\"i\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 21\n    }\n  }, error);\n  if (loading) return __jsx(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 23\n    }\n  });\n  return (data === null || data === void 0 ? void 0 : (_data$allProducts2 = data.allProducts) === null || _data$allProducts2 === void 0 ? void 0 : _data$allProducts2.length) ? __jsx(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 5\n    }\n  }, __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, data.allProducts.map(product => __jsx(Col, {\n    key: product.id,\n    sm: sm ? sm : {\n      size: 6\n    },\n    md: md ? md : {\n      size: 4\n    },\n    lg: lg ? lg : {\n      size: 3\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  }, __jsx(Product, {\n    product: product,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }\n  })))), more ? __jsx(\"button\", {\n    onClick: loadingMore,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 15\n    }\n  }, \"loading more\") : null) : __jsx(\"i\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 5\n    }\n  }, \"No result!\");\n};","map":{"version":3,"sources":["/home/huy/apps/ecom-ui/components/Product/list.js"],"names":["useState","useEffect","Fragment","gql","useQuery","rewriteURIForGET","useRouter","withRouter","Router","Item","Product","Container","Row","Col","Spinner","page","toSlug","Loading","GET_PRODUCTS","List","first","skip","category","categories","brand","attributes","orderBy","suggestions","sale","price_from","price_to","sm","md","lg","more","search","except","variables","url_contains","seller","keyword","sale_gt","data","error","loading","fetchMore","loadingMore","count","allProducts","length","updateQuery","prev","fetchMoreResult","Object","assign","map","product","id","size"],"mappings":"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","sourcesContent":["import { useState, useEffect, Fragment } from \"react\";\nimport { gql, useQuery, rewriteURIForGET } from \"@apollo/client\";\nimport { useRouter, withRouter, Router } from \"next/router\";\nimport { Item as Product } from \"./item\";\nimport { Container, Row, Col, Spinner } from \"reactstrap\";\nimport { page } from \"../../config\";\nimport { toSlug } from \"../../lib/chip\";\nimport { Loading } from \"../../src/Loading\";\n\nconst GET_PRODUCTS = gql`\n  query(\n    $first: Int\n    $skip: Int\n    $attributes: AttributeGroupWhereInput\n    $category: String\n    $categories: [String]\n    $brand: BrandWhereInput\n    $orderBy: String\n    $suggestions: ProductSuggestionType\n    $seller: UserWhereInput\n    $sale_gt: Int\n    $price_from: Int\n    $price_to: Int\n    $keyword: String\n    $except: String\n  ) {\n    allProducts(\n      first: $first\n      skip: $skip\n      where: {\n        AND: [\n          { url_contains: $keyword }\n          { category: { OR: [{ url: $category }, { url_in: $categories }] } }\n          { brand: $brand }\n          { attributeGroups_some: $attributes }\n          { suggestions: $suggestions }\n          { seller: $seller }\n          { sale_gt: $sale_gt }\n          { price_gt: $price_from }\n          { price_lt: $price_to }\n          { url_not: $except }\n        ]\n      }\n      orderBy: $orderBy\n    ) {\n      id\n      name\n      image {\n        publicUrl\n      }\n      images {\n        file {\n          publicUrl\n        }\n      }\n      price\n      sale\n      attributeGroups {\n        id\n        name\n        attributes {\n          id\n          name\n          url\n        }\n      }\n      url\n    }\n  }\n`;\nexport const List = ({\n  first = 6,\n  skip = 0,\n  category,\n  categories,\n  brand = \"\",\n  attributes,\n  orderBy,\n  suggestions,\n  sale,\n  price_from = 0,\n  price_to,\n  sm,\n  md,\n  lg,\n  more = true,\n  search,\n  except,\n}) => {\n  let variables = {\n    first,\n    skip,\n    category,\n    categories,\n    brand: brand ? { url_contains: brand } : null,\n    attributes,\n    orderBy,\n    suggestions,\n    seller: page.seller,\n    price_from,\n    price_to: price_to ? price_to : 999999999,\n    except,\n  };\n  if (search) variables.keyword = toSlug(search);\n  if (sale) variables.sale_gt = 0;\n  let { data, error, loading, fetchMore } = useQuery(GET_PRODUCTS, {\n    variables,\n  });\n  function loadingMore() {\n    const count = data?.allProducts?.length;\n    variables.skip = count;\n    fetchMore({\n      variables,\n      updateQuery: (prev, { fetchMoreResult }) => {\n        if (!fetchMoreResult) {\n          return prev;\n        }\n        return Object.assign({}, prev, {\n          allProducts: [...prev.allProducts, ...fetchMoreResult.allProducts],\n        });\n      },\n    });\n  }\n  if (error) return <i>{error}</i>;\n  if (loading) return <Loading />;\n  return data?.allProducts?.length ? (\n    <section>\n      <Row>\n        {data.allProducts.map((product) => (\n          <Col\n            key={product.id}\n            sm={sm ? sm : { size: 6 }}\n            md={md ? md : { size: 4 }}\n            lg={lg ? lg : { size: 3 }}\n          >\n            <Product product={product} />\n          </Col>\n        ))}\n      </Row>\n      {more ? <button onClick={loadingMore}>loading more</button> : null}\n    </section>\n  ) : (\n    <i>No result!</i>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}