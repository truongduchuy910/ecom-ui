{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query($url: String) {\\n    allProducts(first: 1, where: { url: $url }) {\\n      id\\n      image {\\n        publicUrl\\n      }\\n      name\\n      price\\n      sale\\n      images {\\n        file {\\n          publicUrl\\n        }\\n      }\\n      brand {\\n        name\\n        url\\n      }\\n      category {\\n        name\\n        url\\n      }\\n      description\\n      file {\\n        publicUrl\\n      }\\n      guide\\n      attributeGroups {\\n        id\\n        name\\n        attributes {\\n          id\\n          name\\n          url\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { List as Products } from \"../components/Product/list\";\nimport { Container, Spinner } from \"reactstrap\";\nimport { Product } from \"../components/Product/detail\";\nimport { useRouter } from \"next/router\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport { Loading } from \"../components/src/Loading\";\nimport { Divider } from \"../components/src/Divider\";\nimport { useApollo } from \"../apollo/client\";\nvar GET_PRODUCTS = gql(_templateObject());\nexport default function ProductDetali() {\n  var _data$allProducts;\n\n  var router = useRouter();\n  var detail = router.query.detail;\n\n  var _useQuery = useQuery(GET_PRODUCTS, {\n    variables: {\n      url: detail\n    }\n  }),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      loading = _useQuery.loading;\n\n  if (error) return __jsx(\"i\", null, error);\n  if (loading) return __jsx(Loading, null);\n  var product = (data === null || data === void 0 ? void 0 : (_data$allProducts = data.allProducts) === null || _data$allProducts === void 0 ? void 0 : _data$allProducts.length) ? data.allProducts[0] : null;\n  return product ? __jsx(Container, null, __jsx(Product, {\n    product: product\n  }), __jsx(\"h4\", null, \"S\\u1EA3n Ph\\u1EA9m Li\\xEAn Quan\"), __jsx(Divider, null), __jsx(Products, {\n    category: product.category.url,\n    except: detail,\n    more: false\n  })) : null;\n}","map":null,"metadata":{},"sourceType":"module"}