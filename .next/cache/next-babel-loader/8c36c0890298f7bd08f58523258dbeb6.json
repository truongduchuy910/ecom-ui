{"ast":null,"code":"var _jsxFileName = \"/home/huy/apps/ecom-ui/components/Sidebar/filter.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Fragment } from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { Item as Category } from \"../Category/item\";\nimport { Item as Attributes } from \"../Attribute/item\";\nconst GET_CATE = gql`\n  query($category: String, $attributes: [ID]) {\n    allCategories(where: { url: $category }) {\n      id\n      name\n      url\n    }\n    allAttributes(where: { id_in: $attributes }) {\n      id\n      name\n      url\n    }\n  }\n`;\nexport const Filter = ({\n  category,\n  brand,\n  search,\n  price_from,\n  price_to,\n  attributes\n}) => {\n  const variables = {\n    category,\n    attributes: attributes ? attributes === null || attributes === void 0 ? void 0 : attributes.map(attr => attr.id) : null\n  };\n  console.log(variables);\n  const {\n    data\n  } = useQuery(GET_CATE, {\n    variables\n  });\n  return __jsx(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, __jsx(Category, {\n    categories: (data === null || data === void 0 ? void 0 : data.allCategories) || [],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }));\n};","map":{"version":3,"sources":["/home/huy/apps/ecom-ui/components/Sidebar/filter.js"],"names":["Fragment","gql","useQuery","Item","Category","Attributes","GET_CATE","Filter","category","brand","search","price_from","price_to","attributes","variables","map","attr","id","console","log","data","allCategories"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AACA,SAASC,IAAI,IAAIC,QAAjB,QAAiC,kBAAjC;AACA,SAASD,IAAI,IAAIE,UAAjB,QAAmC,mBAAnC;AACA,MAAMC,QAAQ,GAAGL,GAAI;;;;;;;;;;;;;CAArB;AAcA,OAAO,MAAMM,MAAM,GAAG,CAAC;AACrBC,EAAAA,QADqB;AAErBC,EAAAA,KAFqB;AAGrBC,EAAAA,MAHqB;AAIrBC,EAAAA,UAJqB;AAKrBC,EAAAA,QALqB;AAMrBC,EAAAA;AANqB,CAAD,KAOhB;AACJ,QAAMC,SAAS,GAAG;AAChBN,IAAAA,QADgB;AAEhBK,IAAAA,UAAU,EAAEA,UAAU,GAAGA,UAAH,aAAGA,UAAH,uBAAGA,UAAU,CAAEE,GAAZ,CAAiBC,IAAD,IAAUA,IAAI,CAACC,EAA/B,CAAH,GAAwC;AAF9C,GAAlB;AAIAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,SAAZ;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAWlB,QAAQ,CAACI,QAAD,EAAW;AAClCQ,IAAAA;AADkC,GAAX,CAAzB;AAIA,SACE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD;AAAU,IAAA,UAAU,EAAE,CAAAM,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEC,aAAN,KAAuB,EAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CAtBM","sourcesContent":["import { Fragment } from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { Item as Category } from \"../Category/item\";\nimport { Item as Attributes } from \"../Attribute/item\";\nconst GET_CATE = gql`\n  query($category: String, $attributes: [ID]) {\n    allCategories(where: { url: $category }) {\n      id\n      name\n      url\n    }\n    allAttributes(where: { id_in: $attributes }) {\n      id\n      name\n      url\n    }\n  }\n`;\nexport const Filter = ({\n  category,\n  brand,\n  search,\n  price_from,\n  price_to,\n  attributes,\n}) => {\n  const variables = {\n    category,\n    attributes: attributes ? attributes?.map((attr) => attr.id) : null,\n  };\n  console.log(variables);\n  const { data } = useQuery(GET_CATE, {\n    variables,\n  });\n\n  return (\n    <Fragment>\n      <Category categories={data?.allCategories || []} />\n    </Fragment>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}