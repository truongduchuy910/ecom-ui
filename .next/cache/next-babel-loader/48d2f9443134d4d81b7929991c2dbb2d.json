{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"/home/huy/apps/ecom-ui/components/Product/list.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query(\\n    $first: Int\\n    $skip: Int\\n    $attributes: AttributeGroupWhereInput\\n    $category: String\\n    $categories: [String]\\n    $brand: BrandWhereInput\\n    $orderBy: String\\n    $suggestions: ProductSuggestionType\\n    $seller: UserWhereInput\\n    $sale_gt: Int\\n    $price_from: Int\\n    $price_to: Int\\n    $keyword: String\\n    $except: String\\n  ) {\\n    allProducts(\\n      first: $first\\n      skip: $skip\\n      where: {\\n        AND: [\\n          { url_contains: $keyword }\\n          { category: { OR: [{ url: $category }, { url_in: $categories }] } }\\n          { brand: $brand }\\n          { attributeGroups_some: $attributes }\\n          { suggestions: $suggestions }\\n          { seller: $seller }\\n          { sale_gt: $sale_gt }\\n          { price_gt: $price_from }\\n          { price_lt: $price_to }\\n          { url_not: $except }\\n        ]\\n      }\\n      orderBy: $orderBy\\n    ) {\\n      id\\n      name\\n      image {\\n        publicUrl\\n      }\\n      images {\\n        file {\\n          publicUrl\\n        }\\n      }\\n      price\\n      sale\\n      attributeGroups {\\n        id\\n        name\\n        attributes {\\n          id\\n          name\\n          url\\n        }\\n      }\\n      url\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useState, useEffect, Fragment } from \"react\";\nimport { gql, useQuery, rewriteURIForGET } from \"@apollo/client\";\nimport { useRouter, withRouter, Router } from \"next/router\";\nimport { Item as Product } from \"./item\";\nimport { Container, Row, Col, Spinner } from \"reactstrap\";\nimport { page } from \"../../config\";\nimport { toSlug } from \"../../lib/chip\";\nimport { Loading } from \"../../src/Loading\";\nvar GET_PRODUCTS = gql(_templateObject());\nexport var List = function List(_ref) {\n  _s();\n\n  var _data$allProducts2;\n\n  var _ref$first = _ref.first,\n      first = _ref$first === void 0 ? 6 : _ref$first,\n      _ref$skip = _ref.skip,\n      skip = _ref$skip === void 0 ? 0 : _ref$skip,\n      category = _ref.category,\n      categories = _ref.categories,\n      _ref$brand = _ref.brand,\n      brand = _ref$brand === void 0 ? \"\" : _ref$brand,\n      attributes = _ref.attributes,\n      orderBy = _ref.orderBy,\n      suggestions = _ref.suggestions,\n      sale = _ref.sale,\n      _ref$price_from = _ref.price_from,\n      price_from = _ref$price_from === void 0 ? 0 : _ref$price_from,\n      price_to = _ref.price_to,\n      sm = _ref.sm,\n      md = _ref.md,\n      lg = _ref.lg,\n      _ref$more = _ref.more,\n      more = _ref$more === void 0 ? true : _ref$more,\n      search = _ref.search,\n      except = _ref.except;\n  var variables = {\n    first: first,\n    skip: skip,\n    category: category,\n    categories: categories,\n    brand: brand ? {\n      url_contains: brand\n    } : null,\n    attributes: attributes,\n    orderBy: orderBy,\n    suggestions: suggestions,\n    seller: page.seller,\n    price_from: price_from,\n    price_to: price_to ? price_to : 999999999,\n    except: except\n  };\n  if (search) variables.keyword = toSlug(search);\n  if (sale) variables.sale_gt = 0;\n\n  var _useQuery = useQuery(GET_PRODUCTS, {\n    variables: variables\n  }),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      loading = _useQuery.loading,\n      fetchMore = _useQuery.fetchMore;\n\n  function loadingMore() {\n    var _data$allProducts;\n\n    var count = data === null || data === void 0 ? void 0 : (_data$allProducts = data.allProducts) === null || _data$allProducts === void 0 ? void 0 : _data$allProducts.length;\n    variables.skip = count;\n    fetchMore({\n      variables: variables,\n      updateQuery: function updateQuery(prev, _ref2) {\n        var fetchMoreResult = _ref2.fetchMoreResult;\n\n        if (!fetchMoreResult) {\n          return prev;\n        }\n\n        return Object.assign({}, prev, {\n          allProducts: [].concat(_toConsumableArray(prev.allProducts), _toConsumableArray(fetchMoreResult.allProducts))\n        });\n      }\n    });\n  }\n\n  if (error) return __jsx(\"i\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 21\n    }\n  }, error);\n  if (loading) return __jsx(Loading, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 23\n    }\n  });\n  return (data === null || data === void 0 ? void 0 : (_data$allProducts2 = data.allProducts) === null || _data$allProducts2 === void 0 ? void 0 : _data$allProducts2.length) ? __jsx(\"section\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 5\n    }\n  }, __jsx(Row, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, data.allProducts.map(function (product) {\n    return __jsx(Col, {\n      key: product.id,\n      sm: sm ? sm : {\n        size: 6\n      },\n      md: md ? md : {\n        size: 4\n      },\n      lg: lg ? lg : {\n        size: 3\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }\n    }, __jsx(Product, {\n      product: product,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }\n    }));\n  })), more ? __jsx(\"button\", {\n    onClick: loadingMore,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 15\n    }\n  }, \"loading more\") : null) : __jsx(\"i\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 5\n    }\n  }, \"No result!\");\n};\n\n_s(List, \"H5Blujjb5lnbExdzVNMGHM2BI7U=\", false, function () {\n  return [useQuery];\n});\n\n_c = List;\n\nvar _c;\n\n$RefreshReg$(_c, \"List\");","map":{"version":3,"sources":["/home/huy/apps/ecom-ui/components/Product/list.js"],"names":["useState","useEffect","Fragment","gql","useQuery","rewriteURIForGET","useRouter","withRouter","Router","Item","Product","Container","Row","Col","Spinner","page","toSlug","Loading","GET_PRODUCTS","List","first","skip","category","categories","brand","attributes","orderBy","suggestions","sale","price_from","price_to","sm","md","lg","more","search","except","variables","url_contains","seller","keyword","sale_gt","data","error","loading","fetchMore","loadingMore","count","allProducts","length","updateQuery","prev","fetchMoreResult","Object","assign","map","product","id","size"],"mappings":"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","sourcesContent":["import { useState, useEffect, Fragment } from \"react\";\nimport { gql, useQuery, rewriteURIForGET } from \"@apollo/client\";\nimport { useRouter, withRouter, Router } from \"next/router\";\nimport { Item as Product } from \"./item\";\nimport { Container, Row, Col, Spinner } from \"reactstrap\";\nimport { page } from \"../../config\";\nimport { toSlug } from \"../../lib/chip\";\nimport { Loading } from \"../../src/Loading\";\n\nconst GET_PRODUCTS = gql`\n  query(\n    $first: Int\n    $skip: Int\n    $attributes: AttributeGroupWhereInput\n    $category: String\n    $categories: [String]\n    $brand: BrandWhereInput\n    $orderBy: String\n    $suggestions: ProductSuggestionType\n    $seller: UserWhereInput\n    $sale_gt: Int\n    $price_from: Int\n    $price_to: Int\n    $keyword: String\n    $except: String\n  ) {\n    allProducts(\n      first: $first\n      skip: $skip\n      where: {\n        AND: [\n          { url_contains: $keyword }\n          { category: { OR: [{ url: $category }, { url_in: $categories }] } }\n          { brand: $brand }\n          { attributeGroups_some: $attributes }\n          { suggestions: $suggestions }\n          { seller: $seller }\n          { sale_gt: $sale_gt }\n          { price_gt: $price_from }\n          { price_lt: $price_to }\n          { url_not: $except }\n        ]\n      }\n      orderBy: $orderBy\n    ) {\n      id\n      name\n      image {\n        publicUrl\n      }\n      images {\n        file {\n          publicUrl\n        }\n      }\n      price\n      sale\n      attributeGroups {\n        id\n        name\n        attributes {\n          id\n          name\n          url\n        }\n      }\n      url\n    }\n  }\n`;\nexport const List = ({\n  first = 6,\n  skip = 0,\n  category,\n  categories,\n  brand = \"\",\n  attributes,\n  orderBy,\n  suggestions,\n  sale,\n  price_from = 0,\n  price_to,\n  sm,\n  md,\n  lg,\n  more = true,\n  search,\n  except,\n}) => {\n  let variables = {\n    first,\n    skip,\n    category,\n    categories,\n    brand: brand ? { url_contains: brand } : null,\n    attributes,\n    orderBy,\n    suggestions,\n    seller: page.seller,\n    price_from,\n    price_to: price_to ? price_to : 999999999,\n    except,\n  };\n  if (search) variables.keyword = toSlug(search);\n  if (sale) variables.sale_gt = 0;\n  let { data, error, loading, fetchMore } = useQuery(GET_PRODUCTS, {\n    variables,\n  });\n  function loadingMore() {\n    const count = data?.allProducts?.length;\n    variables.skip = count;\n    fetchMore({\n      variables,\n      updateQuery: (prev, { fetchMoreResult }) => {\n        if (!fetchMoreResult) {\n          return prev;\n        }\n        return Object.assign({}, prev, {\n          allProducts: [...prev.allProducts, ...fetchMoreResult.allProducts],\n        });\n      },\n    });\n  }\n  if (error) return <i>{error}</i>;\n  if (loading) return <Loading />;\n  return data?.allProducts?.length ? (\n    <section>\n      <Row>\n        {data.allProducts.map((product) => (\n          <Col\n            key={product.id}\n            sm={sm ? sm : { size: 6 }}\n            md={md ? md : { size: 4 }}\n            lg={lg ? lg : { size: 3 }}\n          >\n            <Product product={product} />\n          </Col>\n        ))}\n      </Row>\n      {more ? <button onClick={loadingMore}>loading more</button> : null}\n    </section>\n  ) : (\n    <i>No result!</i>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}