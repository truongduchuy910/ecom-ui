{"ast":null,"code":"var _jsxFileName = \"/media/huy/New Volume/linux/apps/ecom-ui/components/Banner/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { gql, useQuery } from \"@apollo/client\";\nimport { useContext } from \"react\";\nimport { Loading } from \"../Loading\";\nimport { One } from \"./One\";\nimport { Query, SellerContext } from \"../../apollo\";\n\nconst Banners = ({\n  option = 1,\n  onChoose\n}) => {\n  // data\n  let theme = useContext(SellerContext);\n  let variables = {\n    banner: {\n      seller: theme.seller\n    }\n  };\n  let {\n    data,\n    error,\n    loading\n  } = useQuery(gql`\n      query($banner: BannerWhereInput) {\n        allBanners(where: $banner) {\n          id\n          file {\n            publicUrl\n          }\n        }\n      }\n    `, {\n    variables\n  }); // modify\n\n  let banners = data === null || data === void 0 ? void 0 : data.allBanners.map(banner => {\n    var _banner$file;\n\n    return _objectSpread(_objectSpread({}, banner), {}, {\n      img: theme.server + (banner === null || banner === void 0 ? void 0 : (_banner$file = banner.file) === null || _banner$file === void 0 ? void 0 : _banner$file.publicUrl)\n    });\n  }); // render\n\n  if (!(error || loading)) {\n    switch (option) {\n      case 1:\n        return __jsx(One, {\n          banners: banners,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 16\n          }\n        });\n\n      default:\n        return __jsx(\"pre\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 16\n          }\n        }, \"Invalid components.\");\n    }\n  } else return __jsx(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 17\n    }\n  });\n};\n\nexport default Banners;","map":{"version":3,"sources":["/media/huy/New Volume/linux/apps/ecom-ui/components/Banner/index.js"],"names":["gql","useQuery","useContext","Loading","One","Query","SellerContext","Banners","option","onChoose","theme","variables","banner","seller","data","error","loading","banners","allBanners","map","img","server","file","publicUrl"],"mappings":";;;;;;;;;;AAAA,SAASA,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,SAASC,GAAT,QAAoB,OAApB;AACA,SAASC,KAAT,EAAgBC,aAAhB,QAAqC,cAArC;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA,MAAM,GAAG,CAAX;AAAcC,EAAAA;AAAd,CAAD,KAA8B;AAC5C;AACA,MAAIC,KAAK,GAAGR,UAAU,CAACI,aAAD,CAAtB;AACA,MAAIK,SAAS,GAAG;AAAEC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,MAAM,EAAEH,KAAK,CAACG;AAAhB;AAAV,GAAhB;AACA,MAAI;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAA2Bf,QAAQ,CACrCD,GAAI;;;;;;;;;KADiC,EAWrC;AAAEW,IAAAA;AAAF,GAXqC,CAAvC,CAJ4C,CAiB5C;;AACA,MAAIM,OAAO,GAAGH,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEI,UAAN,CAAiBC,GAAjB,CAAsBP,MAAD,IAAY;AAAA;;AAC7C,2CAAYA,MAAZ;AAAoBQ,MAAAA,GAAG,EAAEV,KAAK,CAACW,MAAN,IAAeT,MAAf,aAAeA,MAAf,uCAAeA,MAAM,CAAEU,IAAvB,iDAAe,aAAcC,SAA7B;AAAzB;AACD,GAFa,CAAd,CAlB4C,CAqB5C;;AACA,MAAI,EAAER,KAAK,IAAIC,OAAX,CAAJ,EAAyB;AACvB,YAAQR,MAAR;AACE,WAAK,CAAL;AACE,eAAO,MAAC,GAAD;AAAK,UAAA,OAAO,EAAES,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;;AACF;AACE,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAP;AAJJ;AAMD,GAPD,MAOO,OAAO,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACR,CA9BD;;AA+BA,eAAeV,OAAf","sourcesContent":["import { gql, useQuery } from \"@apollo/client\";\r\nimport { useContext } from \"react\";\r\nimport { Loading } from \"../Loading\";\r\nimport { One } from \"./One\";\r\nimport { Query, SellerContext } from \"../../apollo\";\r\n\r\nconst Banners = ({ option = 1, onChoose }) => {\r\n  // data\r\n  let theme = useContext(SellerContext);\r\n  let variables = { banner: { seller: theme.seller } };\r\n  let { data, error, loading } = useQuery(\r\n    gql`\r\n      query($banner: BannerWhereInput) {\r\n        allBanners(where: $banner) {\r\n          id\r\n          file {\r\n            publicUrl\r\n          }\r\n        }\r\n      }\r\n    `,\r\n    { variables }\r\n  );\r\n  // modify\r\n  let banners = data?.allBanners.map((banner) => {\r\n    return { ...banner, img: theme.server + banner?.file?.publicUrl };\r\n  });\r\n  // render\r\n  if (!(error || loading)) {\r\n    switch (option) {\r\n      case 1:\r\n        return <One banners={banners} />;\r\n      default:\r\n        return <pre>Invalid components.</pre>;\r\n    }\r\n  } else return <Loading />;\r\n};\r\nexport default Banners;\r\n"]},"metadata":{},"sourceType":"module"}