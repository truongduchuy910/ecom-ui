{"ast":null,"code":"var _jsxFileName = \"/media/huy/New Volume/linux/apps/ecom-ui/components/Brand/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { gql, useQuery } from \"@apollo/client\";\nimport { useContext } from \"react\";\nimport { Loading } from \"../Loading\";\nimport { One } from \"./One\";\nimport { Query, SellerContext } from \"../../apollo\";\n\nconst Brands = ({\n  option = 1,\n  onChoose\n}) => {\n  // data\n  let theme = useContext(SellerContext);\n  let variables = {\n    brand: {\n      seller: theme.seller\n    }\n  };\n  const {\n    data,\n    error,\n    loading\n  } = useQuery(gql`query($brand: BrandWhereInput) {\n        allBrands(where: $brand) {\n            id\n            name\n            url\n        }\n    }`, {\n    variables\n  }); // render\n\n  if (!(error || loading)) {\n    switch (option) {\n      case 1:\n        return __jsx(One, {\n          brands: data === null || data === void 0 ? void 0 : data.allBrands,\n          onChoose: onChoose,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 28\n          }\n        });\n\n      default:\n        return __jsx(\"pre\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 24\n          }\n        }, \"Invalid components.\");\n    }\n  } else return __jsx(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 19\n    }\n  });\n};\n\nexport default Brands;","map":{"version":3,"sources":["/media/huy/New Volume/linux/apps/ecom-ui/components/Brand/index.js"],"names":["gql","useQuery","useContext","Loading","One","Query","SellerContext","Brands","option","onChoose","theme","variables","brand","seller","data","error","loading","allBrands"],"mappings":";;;AAAA,SAASA,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,SAASC,GAAT,QAAoB,OAApB;AACA,SAASC,KAAT,EAAgBC,aAAhB,QAAqC,cAArC;;AAGA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA,MAAM,GAAG,CAAX;AAAcC,EAAAA;AAAd,CAAD,KAA8B;AACzC;AACA,MAAIC,KAAK,GAAGR,UAAU,CAACI,aAAD,CAAtB;AACA,MAAIK,SAAS,GAAG;AAAEC,IAAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAEH,KAAK,CAACG;AAAhB;AAAT,GAAhB;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAA2Bf,QAAQ,CAACD,GAAI;;;;;;MAAL,EAMrC;AAAEW,IAAAA;AAAF,GANqC,CAAzC,CAJyC,CAYzC;;AACA,MAAI,EAAEI,KAAK,IAAIC,OAAX,CAAJ,EAAyB;AACrB,YAAQR,MAAR;AACI,WAAK,CAAL;AAAQ,eAAO,MAAC,GAAD;AAAK,UAAA,MAAM,EAAEM,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEG,SAAnB;AAA8B,UAAA,QAAQ,EAAER,QAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;;AACR;AACI,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAP;AAHR;AAKH,GAND,MAMO,OAAO,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AAGV,CAtBD;;AAuBA,eAAeF,MAAf","sourcesContent":["import { gql, useQuery } from \"@apollo/client\";\r\nimport { useContext } from \"react\";\r\nimport { Loading } from \"../Loading\";\r\nimport { One } from \"./One\";\r\nimport { Query, SellerContext } from \"../../apollo\";\r\n\r\n\r\nconst Brands = ({ option = 1, onChoose }) => {\r\n    // data\r\n    let theme = useContext(SellerContext);\r\n    let variables = { brand: { seller: theme.seller } };\r\n    const { data, error, loading } = useQuery(gql`query($brand: BrandWhereInput) {\r\n        allBrands(where: $brand) {\r\n            id\r\n            name\r\n            url\r\n        }\r\n    }`, { variables });\r\n\r\n    // render\r\n    if (!(error || loading)) {\r\n        switch (option) {\r\n            case 1: return <One brands={data?.allBrands} onChoose={onChoose} />\r\n            default:\r\n                return <pre>Invalid components.</pre>\r\n        }\r\n    } else return <Loading />\r\n\r\n\r\n}\r\nexport default Brands"]},"metadata":{},"sourceType":"module"}