{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"/media/huy/New Volume/linux/apps/ecom-ui/components/Post/List/index.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"query($first:Int,$skip:Int, $post: PostWhereInput) {\\n        allPosts(first:$first,skip:$skip, where: $post) {\\n            id\\n            title\\n            file {\\n                publicUrl\\n            }\\n            url\\n        }\\n    }\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { gql, useQuery } from \"@apollo/client\";\nimport { useContext, useState } from \"react\";\nimport { Query, SellerContext } from \"../../../apollo\";\nimport { Loading } from \"../../Loading\";\nimport { One } from \"./One\";\n\nvar Posts = function Posts(_ref) {\n  _s();\n\n  var _ref$option = _ref.option,\n      option = _ref$option === void 0 ? 1 : _ref$option,\n      PostWhereInput = _ref.PostWhereInput,\n      _ref$limit = _ref.limit,\n      limit = _ref$limit === void 0 ? 3 : _ref$limit;\n  // data\n  var theme = useContext(SellerContext);\n  var variables = {\n    post: _objectSpread({\n      seller: theme.seller\n    }, PostWhereInput),\n    first: limit,\n    skip: 0\n  };\n\n  var _useQuery = useQuery(gql(_templateObject()), {\n    variables: variables\n  }),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      loading = _useQuery.loading,\n      fetchMore = _useQuery.fetchMore; // method\n\n\n  var _useState = useState(true),\n      mor = _useState[0],\n      setMor = _useState[1];\n\n  var more = mor ? function () {\n    try {\n      var _data$allPosts;\n\n      variables.skip = data === null || data === void 0 ? void 0 : (_data$allPosts = data.allPosts) === null || _data$allPosts === void 0 ? void 0 : _data$allPosts.length;\n      fetchMore({\n        variables: variables,\n        updateQuery: function updateQuery(prev, _ref2) {\n          var _fetchMoreResult$allP;\n\n          var fetchMoreResult = _ref2.fetchMoreResult;\n\n          if (!((_fetchMoreResult$allP = fetchMoreResult.allPosts) === null || _fetchMoreResult$allP === void 0 ? void 0 : _fetchMoreResult$allP.length)) {\n            setMor(false);\n            return prev;\n          }\n\n          return Object.assign({}, prev, {\n            allPosts: [].concat(_toConsumableArray(prev.allPosts), _toConsumableArray(fetchMoreResult.allPosts))\n          });\n        }\n      });\n    } catch (e) {\n      setMor(false);\n    }\n  } : false; // modify\n\n  var posts = data === null || data === void 0 ? void 0 : data.allPosts.map(function (post) {\n    var _post$file;\n\n    return _objectSpread(_objectSpread({}, post), {}, {\n      guilde: theme.server + (post === null || post === void 0 ? void 0 : (_post$file = post.file) === null || _post$file === void 0 ? void 0 : _post$file.publicUrl)\n    });\n  }); // render\n\n  if (!(error || loading)) {\n    switch (option) {\n      case 1:\n        return __jsx(One, {\n          posts: posts,\n          more: more,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 28\n          }\n        });\n\n      default:\n        return __jsx(\"pre\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 24\n          }\n        }, \"Invalid components.\");\n    }\n  } else return __jsx(Loading, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 19\n    }\n  });\n};\n\n_s(Posts, \"rKy3JPNpk+phplG4mr4/gNvS4us=\", false, function () {\n  return [useQuery];\n});\n\n_c = Posts;\nexport default Posts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"sources":["/media/huy/New Volume/linux/apps/ecom-ui/components/Post/List/index.js"],"names":["gql","useQuery","useContext","useState","Query","SellerContext","Loading","One","Posts","option","PostWhereInput","limit","theme","variables","post","seller","first","skip","data","error","loading","fetchMore","mor","setMor","more","allPosts","length","updateQuery","prev","fetchMoreResult","Object","assign","e","posts","map","guilde","server","file","publicUrl"],"mappings":"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","sourcesContent":["import { gql, useQuery } from \"@apollo/client\";\r\nimport { useContext, useState } from \"react\";\r\nimport { Query, SellerContext } from \"../../../apollo\";\r\nimport { Loading } from \"../../Loading\";\r\nimport { One } from \"./One\";\r\n\r\nconst Posts = ({ option = 1, PostWhereInput, limit = 3 }) => {\r\n    // data\r\n    let theme = useContext(SellerContext);\r\n    let variables = { post: { seller: theme.seller, ...PostWhereInput }, first: limit, skip: 0 };\r\n    const { data, error, loading, fetchMore } = useQuery(gql`query($first:Int,$skip:Int, $post: PostWhereInput) {\r\n        allPosts(first:$first,skip:$skip, where: $post) {\r\n            id\r\n            title\r\n            file {\r\n                publicUrl\r\n            }\r\n            url\r\n        }\r\n    }`, { variables });\r\n\r\n    // method\r\n    const [mor, setMor] = useState(true);\r\n    const more = mor ? () => {\r\n        try {\r\n            variables.skip = data?.allPosts?.length;\r\n            fetchMore({\r\n                variables,\r\n                updateQuery: (prev, { fetchMoreResult }) => {\r\n                    if (!fetchMoreResult.allPosts?.length) {\r\n                        setMor(false)\r\n                        return prev;\r\n                    }\r\n                    return Object.assign({}, prev, {\r\n                        allPosts: [...prev.allPosts, ...fetchMoreResult.allPosts],\r\n                    });\r\n                },\r\n            });\r\n        } catch (e) {\r\n            setMor(false)\r\n        }\r\n    } : false;\r\n    // modify\r\n    const posts = data?.allPosts.map(post => {\r\n\r\n        return { ...post, guilde: theme.server + post?.file?.publicUrl };\r\n    })\r\n    // render\r\n    if (!(error || loading)) {\r\n        switch (option) {\r\n            case 1: return <One posts={posts} more={more} />\r\n            default:\r\n                return <pre>Invalid components.</pre>\r\n        }\r\n    } else return <Loading />\r\n}\r\nexport default Posts"]},"metadata":{},"sourceType":"module"}