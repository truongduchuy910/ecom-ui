{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"/media/huy/New Volume/linux/apps/ecom-ui/components/Attribute/index.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n      query($attribute: AttributeWhereInput) {\\n        allAttributes(where: $attribute) {\\n          id\\n          name\\n          url\\n        }\\n      }\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql, useQuery } from \"@apollo/client\";\nimport { useContext } from \"react\";\nimport { Loading } from \"../Loading\";\nimport { One } from \"./One\";\nimport { Query, SellerContext } from \"../../apollo\";\n\nvar Attributes = function Attributes(_ref) {\n  _s();\n\n  var _ref$option = _ref.option,\n      option = _ref$option === void 0 ? 1 : _ref$option,\n      onChoose = _ref.onChoose;\n  // data\n  var theme = useContext(SellerContext);\n  var variables = {\n    attribute: {\n      seller: theme.seller\n    }\n  };\n\n  var _useQuery = useQuery(gql(_templateObject()), {\n    variables: variables\n  }),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      loading = _useQuery.loading; // render\n\n\n  if (!(error || loading)) {\n    switch (option) {\n      case 1:\n        return __jsx(One, {\n          attributes: data === null || data === void 0 ? void 0 : data.allAttributes,\n          onChoose: onChoose,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 16\n          }\n        });\n\n      default:\n        return __jsx(\"pre\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 16\n          }\n        }, \"Invalid components.\");\n    }\n  } else return __jsx(Loading, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }\n  });\n};\n\n_s(Attributes, \"fFxYXu16zEspmKOmKwcCffQkfjM=\", false, function () {\n  return [useQuery];\n});\n\n_c = Attributes;\nexport default Attributes;\n\nvar _c;\n\n$RefreshReg$(_c, \"Attributes\");","map":{"version":3,"sources":["/media/huy/New Volume/linux/apps/ecom-ui/components/Attribute/index.js"],"names":["gql","useQuery","useContext","Loading","One","Query","SellerContext","Attributes","option","onChoose","theme","variables","attribute","seller","data","error","loading","allAttributes"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,SAASA,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,SAASC,GAAT,QAAoB,OAApB;AACA,SAASC,KAAT,EAAgBC,aAAhB,QAAqC,cAArC;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAA8B;AAAA;;AAAA,yBAA3BC,MAA2B;AAAA,MAA3BA,MAA2B,4BAAlB,CAAkB;AAAA,MAAfC,QAAe,QAAfA,QAAe;AAC/C;AACA,MAAIC,KAAK,GAAGR,UAAU,CAACI,aAAD,CAAtB;AACA,MAAIK,SAAS,GAAG;AAAEC,IAAAA,SAAS,EAAE;AAAEC,MAAAA,MAAM,EAAEH,KAAK,CAACG;AAAhB;AAAb,GAAhB;;AAH+C,kBAIdZ,QAAQ,CACvCD,GADuC,qBAUvC;AAAEW,IAAAA,SAAS,EAATA;AAAF,GAVuC,CAJM;AAAA,MAIvCG,IAJuC,aAIvCA,IAJuC;AAAA,MAIjCC,KAJiC,aAIjCA,KAJiC;AAAA,MAI1BC,OAJ0B,aAI1BA,OAJ0B,EAiB/C;;;AACA,MAAI,EAAED,KAAK,IAAIC,OAAX,CAAJ,EAAyB;AACvB,YAAQR,MAAR;AACE,WAAK,CAAL;AACE,eAAO,MAAC,GAAD;AAAK,UAAA,UAAU,EAAEM,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEG,aAAvB;AAAsC,UAAA,QAAQ,EAAER,QAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;;AACF;AACE,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAP;AAJJ;AAMD,GAPD,MAOO,OAAO,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACR,CA1BD;;GAAMF,U;UAI6BN,Q;;;KAJ7BM,U;AA2BN,eAAeA,UAAf","sourcesContent":["import { gql, useQuery } from \"@apollo/client\";\r\nimport { useContext } from \"react\";\r\nimport { Loading } from \"../Loading\";\r\nimport { One } from \"./One\";\r\nimport { Query, SellerContext } from \"../../apollo\";\r\n\r\nconst Attributes = ({ option = 1, onChoose }) => {\r\n  // data\r\n  let theme = useContext(SellerContext);\r\n  let variables = { attribute: { seller: theme.seller } };\r\n  const { data, error, loading } = useQuery(\r\n    gql`\r\n      query($attribute: AttributeWhereInput) {\r\n        allAttributes(where: $attribute) {\r\n          id\r\n          name\r\n          url\r\n        }\r\n      }\r\n    `,\r\n    { variables }\r\n  );\r\n\r\n  // render\r\n  if (!(error || loading)) {\r\n    switch (option) {\r\n      case 1:\r\n        return <One attributes={data?.allAttributes} onChoose={onChoose} />;\r\n      default:\r\n        return <pre>Invalid components.</pre>;\r\n    }\r\n  } else return <Loading />;\r\n};\r\nexport default Attributes;\r\n"]},"metadata":{},"sourceType":"module"}