{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { gql, useQuery, useMutation } from \"@apollo/client\";\nimport { emptyCart } from \"../../apollo/action\";\nimport { customerVar, newOrderVar, newOrderCountVar } from \"../../apollo/client\";\nimport { Item as CartItem } from \"./item\";\nimport { List } from \"./list\";\nimport { useRouter } from \"next/router\";\nimport { page } from \"../../config/index\";\nimport { formatMoney, getErrorMessage } from \"../../lib/chip\";\nimport { Fragment } from \"react\";\nimport { css } from \"../src/css\";\nimport { theme } from \"../../config/index\";\nimport { Loading } from \"../src/Loading\";\nimport { Link } from \"../src/Link\";\nimport { List as Customer } from \"../Customer/CurrentCustomer\";\nimport { QuickCart } from \"./quickCart\";\nimport { Row, Col } from \"reactstrap\";\nexport const CART = gql`\n  query {\n    cartItems @client\n    user @client\n    customer @client\n  }\n`; // create orderItem\n\nexport const CREATE_ORDER_ITEMS = gql`\n  mutation($data: [OrderItemsCreateInput]) {\n    createOrderItems(data: $data) {\n      id\n    }\n  }\n`; // create Order\n\nexport const CREATE_ORDER = gql`\n  mutation(\n    $items: [OrderItemWhereUniqueInput]\n    $customer: CustomerWhereUniqueInput\n    $ofSeller: UserWhereUniqueInput\n    $total: Int\n  ) {\n    createOrder(\n      data: {\n        customer: { connect: $customer }\n        items: { connect: $items }\n        ofSeller: { connect: $ofSeller }\n        total: $total\n      }\n    ) {\n      id\n      seller {\n        id\n        name\n      }\n      items {\n        id\n        product {\n          image {\n            publicUrl\n          }\n          images {\n            file {\n              publicUrl\n            }\n          }\n          name\n        }\n        price\n        quantity\n        attributes {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\nexport const OrderItemsCreateInput = item => ({\n  data: {\n    product: {\n      connect: {\n        id: item.product.id\n      }\n    },\n    price: item.price,\n    quantity: item.quantity\n  }\n});\nexport const OrderItemsCreateInputs = (cartItems = []) => cartItems === null || cartItems === void 0 ? void 0 : cartItems.map(item => OrderItemsCreateInput(item));\nexport const order = async ({\n  createOrderItems,\n  createOrder,\n  dataOICI,\n  page,\n  customer,\n  sum,\n  router\n}) => {\n  // create cart items\n  const {\n    data: dataCOI,\n    error\n  } = await createOrderItems({\n    variables: {\n      data: dataOICI\n    }\n  });\n  console.log(dataCOI); // creat cart and connect cart items\n\n  if (dataCOI.createOrderItems) {\n    let variables = {\n      items: dataCOI.createOrderItems.map(e => ({\n        id: e.id\n      })),\n      customer: {\n        id: customer.id\n      },\n      ofSeller: {\n        id: page.seller.id\n      },\n      total: sum\n    };\n\n    try {\n      var _dataCreateOrder$crea;\n\n      const {\n        data: dataCreateOrder,\n        errors: ER\n      } = await createOrder({\n        variables\n      });\n      console.log(dataCreateOrder);\n      newOrderVar(true);\n      newOrderCountVar(true);\n      emptyCart();\n      router.push({\n        pathname: \"/order\",\n        query: {\n          createOrderId: dataCreateOrder === null || dataCreateOrder === void 0 ? void 0 : (_dataCreateOrder$crea = dataCreateOrder.createOrder) === null || _dataCreateOrder$crea === void 0 ? void 0 : _dataCreateOrder$crea.id\n        }\n      });\n    } catch {}\n  }\n};\nexport function Cart() {\n  const router = useRouter(); // query\n\n  const {\n    data: cartData,\n    loading,\n    error\n  } = useQuery(CART); // mutation\n\n  const [createOrderItems] = useMutation(CREATE_ORDER_ITEMS);\n  const [createOrder] = useMutation(CREATE_ORDER);\n  if (loading || error || !cartData) return __jsx(Loading, null);\n  const {\n    customer,\n    cartItems,\n    user\n  } = cartData;\n  let sum = 0;\n  cartItems === null || cartItems === void 0 ? void 0 : cartItems.map(cartItem => {\n    sum += cartItem.price;\n  }); // create OrderItemsCreateInputs (GraphQL type)\n\n  let dataOICI = OrderItemsCreateInputs(cartItems);\n  dataOICI === null || dataOICI === void 0 ? void 0 : dataOICI.map(data => data.data.ofSeller = {\n    connect: {\n      id: page.seller.id\n    }\n  }); // function\n\n  return __jsx(Row, null, __jsx(Col, null, (user === null || user === void 0 ? void 0 : user.id) ? __jsx(\"div\", null, __jsx(Customer, {\n    customer: customer\n  })) : __jsx(\"div\", {\n    style: {\n      paddingBottom: theme.spacing(3)\n    }\n  }, __jsx(Link, {\n    href: {\n      pathname: \"/signin\",\n      query: {\n        redirect: \"/cart\"\n      }\n    },\n    style: {\n      marginBottom: theme.spacing(4),\n      display: \"block\"\n    }\n  }, \"Mua h\\xE0ng v\\u1EDBi t\\xE0i kho\\u1EA3n (Khuy\\xEAn d\\xF9ng)\"), __jsx(QuickCart, {\n    cartItems: cartItems\n  })), \" \", __jsx(List, {\n    cartItems: cartItems\n  }), (dataOICI === null || dataOICI === void 0 ? void 0 : dataOICI.length) && user ? __jsx(\"button\", {\n    style: css.button,\n    onClick: () => {\n      order({\n        createOrderItems,\n        createOrder,\n        dataOICI,\n        page,\n        customer,\n        sum,\n        router\n      });\n    }\n  }, \"X\\xE1c nh\\u1EADn \\u0111\\u01A1n h\\xE0ng\") : null));\n}","map":null,"metadata":{},"sourceType":"module"}