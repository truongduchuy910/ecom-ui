{"ast":null,"code":"var _jsxFileName = \"/home/robert/Documents/loaloa.tech/ecom-ui/components/Attribute/listOne.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n// show in product detail\nimport { gql, useQuery } from \"@apollo/client\";\nimport { Item } from \"./itemOne\";\nimport { getErrorMessage } from \"../../lib/chip\";\nimport { Loading } from \"../src/Loading\";\nimport { useContext } from \"react\";\nimport { SellerContext } from \"../src/SellerProvider\";\nconst GET_ATTRIBUTES = gql`\n  query($seller: UserWhereInput) {\n    allAttributes(where: { seller: $seller }) {\n      id\n      name\n      url\n    }\n  }\n`;\nexport function List({\n  attributes\n}) {\n  const theme = useContext(SellerContext);\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(GET_ATTRIBUTES, {\n    variables: {\n      seller: theme.seller\n    }\n  });\n  if (loading) return __jsx(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 23\n    }\n  });\n  if (error) return __jsx(\"i\", {\n    color: \"danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 21\n    }\n  }, getErrorMessage(error));\n  let source = attributes ? attributes : data.allAttributes;\n  return !loading && data ? __jsx(\"div\", {\n    style: {\n      display: \"inline-block\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, source.map(attribute => __jsx(Item, {\n    key: attribute.id,\n    attribute: attribute,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }))) : null;\n}","map":{"version":3,"sources":["/home/robert/Documents/loaloa.tech/ecom-ui/components/Attribute/listOne.js"],"names":["gql","useQuery","Item","getErrorMessage","Loading","useContext","SellerContext","GET_ATTRIBUTES","List","attributes","theme","data","loading","error","variables","seller","source","allAttributes","display","map","attribute","id"],"mappings":";;;AAAA;AACA,SAASA,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AACA,SAASC,IAAT,QAAqB,WAArB;AACA,SAASC,eAAT,QAAgC,gBAAhC;AACA,SAASC,OAAT,QAAwB,gBAAxB;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,MAAMC,cAAc,GAAGP,GAAI;;;;;;;;CAA3B;AASA,OAAO,SAASQ,IAAT,CAAc;AAAEC,EAAAA;AAAF,CAAd,EAA8B;AACnC,QAAMC,KAAK,GAAGL,UAAU,CAACC,aAAD,CAAxB;AACA,QAAM;AAAEK,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA2BZ,QAAQ,CAACM,cAAD,EAAiB;AACxDO,IAAAA,SAAS,EAAE;AAAEC,MAAAA,MAAM,EAAEL,KAAK,CAACK;AAAhB;AAD6C,GAAjB,CAAzC;AAIA,MAAIH,OAAJ,EAAa,OAAO,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAG,IAAA,KAAK,EAAC,QAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmBV,eAAe,CAACU,KAAD,CAAlC,CAAP;AAEX,MAAIG,MAAM,GAAGP,UAAU,GAAGA,UAAH,GAAgBE,IAAI,CAACM,aAA5C;AACA,SAAO,CAACL,OAAD,IAAYD,IAAZ,GACL;AAAK,IAAA,KAAK,EAAE;AAAEO,MAAAA,OAAO,EAAE;AAAX,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,MAAM,CAACG,GAAP,CAAYC,SAAD,IACV,MAAC,IAAD;AAAM,IAAA,GAAG,EAAEA,SAAS,CAACC,EAArB;AAAyB,IAAA,SAAS,EAAED,SAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,CADK,GAMH,IANJ;AAOD","sourcesContent":["// show in product detail\nimport { gql, useQuery } from \"@apollo/client\";\nimport { Item } from \"./itemOne\";\nimport { getErrorMessage } from \"../../lib/chip\";\nimport { Loading } from \"../src/Loading\";\nimport { useContext } from \"react\";\nimport { SellerContext } from \"../src/SellerProvider\";\nconst GET_ATTRIBUTES = gql`\n  query($seller: UserWhereInput) {\n    allAttributes(where: { seller: $seller }) {\n      id\n      name\n      url\n    }\n  }\n`;\nexport function List({ attributes }) {\n  const theme = useContext(SellerContext);\n  const { data, loading, error } = useQuery(GET_ATTRIBUTES, {\n    variables: { seller: theme.seller },\n  });\n\n  if (loading) return <Loading />;\n  if (error) return <i color=\"danger\">{getErrorMessage(error)}</i>;\n\n  let source = attributes ? attributes : data.allAttributes;\n  return !loading && data ? (\n    <div style={{ display: \"inline-block\" }}>\n      {source.map((attribute) => (\n        <Item key={attribute.id} attribute={attribute} />\n      ))}\n    </div>\n  ) : null;\n}\n"]},"metadata":{},"sourceType":"module"}