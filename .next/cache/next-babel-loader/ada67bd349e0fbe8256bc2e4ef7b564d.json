{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/home/huy/apps/ecom-ui/components/Banner/list.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query($seller: UserWhereInput) {\\n    allBanners(where: { seller: $seller }) {\\n      id\\n      file {\\n        publicUrl\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql, useQuery } from \"@apollo/client\";\nimport { Item } from \"./item\";\nimport { Fragment } from \"react\";\nimport { useRouter } from \"next/router\";\nimport Link from \"next/link\";\nimport { queryVar } from \"../../apollo/action\";\nimport { page } from \"../../config\";\nimport { Spinner } from \"reactstrap\";\nvar GET_ATTRIBUTES = gql(_templateObject());\nexport function List() {\n  _s();\n\n  var _this = this;\n\n  var _useQuery = useQuery(GET_ATTRIBUTES, {\n    variables: {\n      seller: page.seller\n    }\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error;\n\n  if (loading) return __jsx(\"i\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 23\n    }\n  }, \"loading...\");\n  return !loading && data ? __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, data.allBanners.map(function (banner) {\n    return __jsx(Item, {\n      key: banner.id,\n      banner: banner,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }\n    });\n  })) : null;\n}\n\n_s(List, \"tP+6C5plfRwxqCbBj3cMUcL7Opk=\", false, function () {\n  return [useQuery];\n});\n\n_c = List;\n\nvar _c;\n\n$RefreshReg$(_c, \"List\");","map":{"version":3,"sources":["/home/huy/apps/ecom-ui/components/Banner/list.js"],"names":["gql","useQuery","Item","Fragment","useRouter","Link","queryVar","page","Spinner","GET_ATTRIBUTES","List","variables","seller","data","loading","error","allBanners","map","banner","id"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,SAASA,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,IAAT,QAAqB,cAArB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,IAAMC,cAAc,GAAGT,GAAH,mBAApB;AAUA,OAAO,SAASU,IAAT,GAAgB;AAAA;;AAAA;;AAAA,kBACYT,QAAQ,CAACQ,cAAD,EAAiB;AACxDE,IAAAA,SAAS,EAAE;AAAEC,MAAAA,MAAM,EAAEL,IAAI,CAACK;AAAf;AAD6C,GAAjB,CADpB;AAAA,MACbC,IADa,aACbA,IADa;AAAA,MACPC,OADO,aACPA,OADO;AAAA,MACEC,KADF,aACEA,KADF;;AAIrB,MAAID,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,SAAO,CAACA,OAAD,IAAYD,IAAZ,GACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,IAAI,CAACG,UAAL,CAAgBC,GAAhB,CAAoB,UAACC,MAAD;AAAA,WACnB,MAAC,IAAD;AAAM,MAAA,GAAG,EAAEA,MAAM,CAACC,EAAlB;AAAsB,MAAA,MAAM,EAAED,MAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADmB;AAAA,GAApB,CADH,CADK,GAMH,IANJ;AAOD;;GAZeR,I;UACmBT,Q;;;KADnBS,I","sourcesContent":["import { gql, useQuery } from \"@apollo/client\";\nimport { Item } from \"./item\";\nimport { Fragment } from \"react\";\nimport { useRouter } from \"next/router\";\nimport Link from \"next/link\";\nimport { queryVar } from \"../../apollo/action\";\nimport { page } from \"../../config\";\nimport { Spinner } from \"reactstrap\";\nconst GET_ATTRIBUTES = gql`\n  query($seller: UserWhereInput) {\n    allBanners(where: { seller: $seller }) {\n      id\n      file {\n        publicUrl\n      }\n    }\n  }\n`;\nexport function List() {\n  const { data, loading, error } = useQuery(GET_ATTRIBUTES, {\n    variables: { seller: page.seller },\n  });\n  if (loading) return <i>loading...</i>;\n  return !loading && data ? (\n    <div>\n      {data.allBanners.map((banner) => (\n        <Item key={banner.id} banner={banner} />\n      ))}\n    </div>\n  ) : null;\n}\n"]},"metadata":{},"sourceType":"module"}