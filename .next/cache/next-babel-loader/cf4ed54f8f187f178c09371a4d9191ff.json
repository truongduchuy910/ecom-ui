{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { Fragment } from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { Item as Category } from \"../Category/item\";\nimport { Item as Attribute } from \"../Attribute/item\";\nimport { formatMoney } from \"../../lib/chip\";\nconst GET_CATE = gql`\n  query($category: String, $attributes: [String]) {\n    allCategories(where: { url: $category }) {\n      id\n      name\n      url\n    }\n    allAttributes(where: { url_in: $attributes }) {\n      id\n      name\n      url\n    }\n  }\n`;\nexport const Filter = ({\n  category = \"-\",\n  brand,\n  search,\n  price_from,\n  price_to,\n  attributes\n}) => {\n  const variables = {\n    category,\n    attributes\n  };\n  console.log(variables);\n  const {\n    data,\n    error\n  } = useQuery(GET_CATE, {\n    variables\n  });\n  console.log(data, error);\n  return __jsx(Fragment, null, search ? __jsx(\"label\", null, \"T\\xECm ki\\u1EBFm: \", search) : null, price_to != 999999999 ? __jsx(\"label\", null, \"Gi\\xE1 t\\u1EEB \", formatMoney(price_from), \" \\u0111\\u1EBFn \", formatMoney(price_to)) : null, (data === null || data === void 0 ? void 0 : data.allCategories.length) ? __jsx(Fragment, null, __jsx(Category, {\n    categories: (data === null || data === void 0 ? void 0 : data.allCategories) || []\n  })) : null, data === null || data === void 0 ? void 0 : data.allAttributes.map(attribute => __jsx(Attribute, {\n    key: attribute.id,\n    attribute: attribute,\n    style: {\n      display: \"inline\",\n      marginRight: 8\n    }\n  })));\n};","map":null,"metadata":{},"sourceType":"module"}