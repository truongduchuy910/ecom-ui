{"ast":null,"code":"var _jsxFileName = \"/home/huy/apps/ecom-ui/components/Cart/quickCart.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, Fragment } from \"react\";\nimport { Create as CreateCustomer } from \"../Customer/create\";\nimport { CREATE_ORDER_ITEMS, CREATE_ORDER } from \".\";\nexport const QuickCart = ({\n  onClick\n}) => {\n  const order = async () => {\n    const [createOrderItems] = useMutation(CREATE_ORDER_ITEMS);\n    const [createOrder] = useMutation(CREATE_ORDER); // create cart items\n\n    const {\n      data: dataCOI,\n      error\n    } = await createOrderItems({\n      variables: {\n        data: dataOICI\n      }\n    }); // creat cart and connect cart items\n\n    if (dataCOI.createOrderItems) {\n      let variables = {\n        items: dataCOI.createOrderItems.map(e => ({\n          id: e.id\n        })),\n        customer: {\n          id: customer.id\n        },\n        ofSeller: {\n          id: page.seller.id\n        },\n        total: sum\n      };\n\n      try {\n        const {\n          data: dataCreateOrder,\n          errors: ER\n        } = await createOrder({\n          variables\n        });\n        newOrderVar(true);\n        newOrderCountVar(true);\n        emptyCart();\n        router.push({\n          pathname: \"/order\"\n        });\n      } catch {}\n    }\n  };\n\n  return __jsx(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, __jsx(CreateCustomer, {\n    onCreate: () => {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }));\n};","map":{"version":3,"sources":["/home/huy/apps/ecom-ui/components/Cart/quickCart.js"],"names":["useState","Fragment","Create","CreateCustomer","CREATE_ORDER_ITEMS","CREATE_ORDER","QuickCart","onClick","order","createOrderItems","useMutation","createOrder","data","dataCOI","error","variables","dataOICI","items","map","e","id","customer","ofSeller","page","seller","total","sum","dataCreateOrder","errors","ER","newOrderVar","newOrderCountVar","emptyCart","router","push","pathname"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,QAAnB,QAAmC,OAAnC;AAEA,SAASC,MAAM,IAAIC,cAAnB,QAAyC,oBAAzC;AACA,SAASC,kBAAT,EAA6BC,YAA7B,QAAiD,GAAjD;AACA,OAAO,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AACxC,QAAMC,KAAK,GAAG,YAAY;AACxB,UAAM,CAACC,gBAAD,IAAqBC,WAAW,CAACN,kBAAD,CAAtC;AACA,UAAM,CAACO,WAAD,IAAgBD,WAAW,CAACL,YAAD,CAAjC,CAFwB,CAGxB;;AACA,UAAM;AAAEO,MAAAA,IAAI,EAAEC,OAAR;AAAiBC,MAAAA;AAAjB,QAA2B,MAAML,gBAAgB,CAAC;AACtDM,MAAAA,SAAS,EAAE;AACTH,QAAAA,IAAI,EAAEI;AADG;AAD2C,KAAD,CAAvD,CAJwB,CASxB;;AACA,QAAIH,OAAO,CAACJ,gBAAZ,EAA8B;AAC5B,UAAIM,SAAS,GAAG;AACdE,QAAAA,KAAK,EAAEJ,OAAO,CAACJ,gBAAR,CAAyBS,GAAzB,CAA8BC,CAAD,KAAQ;AAC1CC,UAAAA,EAAE,EAAED,CAAC,CAACC;AADoC,SAAR,CAA7B,CADO;AAIdC,QAAAA,QAAQ,EAAE;AAAED,UAAAA,EAAE,EAAEC,QAAQ,CAACD;AAAf,SAJI;AAKdE,QAAAA,QAAQ,EAAE;AAAEF,UAAAA,EAAE,EAAEG,IAAI,CAACC,MAAL,CAAYJ;AAAlB,SALI;AAMdK,QAAAA,KAAK,EAAEC;AANO,OAAhB;;AAQA,UAAI;AACF,cAAM;AAAEd,UAAAA,IAAI,EAAEe,eAAR;AAAyBC,UAAAA,MAAM,EAAEC;AAAjC,YAAwC,MAAMlB,WAAW,CAAC;AAC9DI,UAAAA;AAD8D,SAAD,CAA/D;AAGAe,QAAAA,WAAW,CAAC,IAAD,CAAX;AACAC,QAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAC,QAAAA,SAAS;AACTC,QAAAA,MAAM,CAACC,IAAP,CAAY;AAAEC,UAAAA,QAAQ,EAAE;AAAZ,SAAZ;AACD,OARD,CAQE,MAAM,CAAE;AACX;AACF,GA7BD;;AA8BA,SACE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,cAAD;AAAgB,IAAA,QAAQ,EAAE,MAAM,CAAE,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CApCM","sourcesContent":["import { useState, Fragment } from \"react\";\n\nimport { Create as CreateCustomer } from \"../Customer/create\";\nimport { CREATE_ORDER_ITEMS, CREATE_ORDER } from \".\";\nexport const QuickCart = ({ onClick }) => {\n  const order = async () => {\n    const [createOrderItems] = useMutation(CREATE_ORDER_ITEMS);\n    const [createOrder] = useMutation(CREATE_ORDER);\n    // create cart items\n    const { data: dataCOI, error } = await createOrderItems({\n      variables: {\n        data: dataOICI,\n      },\n    });\n    // creat cart and connect cart items\n    if (dataCOI.createOrderItems) {\n      let variables = {\n        items: dataCOI.createOrderItems.map((e) => ({\n          id: e.id,\n        })),\n        customer: { id: customer.id },\n        ofSeller: { id: page.seller.id },\n        total: sum,\n      };\n      try {\n        const { data: dataCreateOrder, errors: ER } = await createOrder({\n          variables,\n        });\n        newOrderVar(true);\n        newOrderCountVar(true);\n        emptyCart();\n        router.push({ pathname: \"/order\" });\n      } catch {}\n    }\n  };\n  return (\n    <Fragment>\n      <CreateCustomer onCreate={() => {}} />\n    </Fragment>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}