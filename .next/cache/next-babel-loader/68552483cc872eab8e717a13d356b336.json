{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query($id: ID) {\\n    user @client\\n    allOrders(orderBy: \\\"time_DESC\\\", where: { id: $id }) {\\n      id\\n      total\\n      step\\n      time\\n      customer {\\n        id\\n        name\\n        phone\\n        address\\n      }\\n      items {\\n        id\\n        product {\\n          name\\n          url\\n          image {\\n            publicUrl\\n          }\\n          images {\\n            file {\\n              publicUrl\\n            }\\n          }\\n        }\\n        price\\n        quantity\\n        attributes {\\n          id\\n          name\\n          url\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql, useQuery, useApolloClient } from \"@apollo/client\";\nimport { getErrorMessage } from \"../../lib/chip\";\nimport { USER } from \"../../apollo/action\";\nimport { newOrderVar } from \"../../apollo/client\";\nimport { Item } from \"./item\";\nimport { Loading } from \"../src/Loading\";\nimport { useRouter } from \"next/router\";\nimport { route } from \"next/dist/next-server/server/router\";\nexport var GET_CART_ITEMS = gql(_templateObject());\nexport function List() {\n  var _router$query, _data$allOrders;\n\n  var router = useRouter();\n  var id = (_router$query = router.query) === null || _router$query === void 0 ? void 0 : _router$query.createOrderId;\n  console.log(id);\n  var client = useApolloClient();\n  var user = client.readQuery({\n    query: USER\n  });\n\n  var _useQuery = useQuery(GET_CART_ITEMS, {\n    variables: {\n      seller: {\n        id: user === null || user === void 0 ? void 0 : user.id\n      },\n      id: id\n    }\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      refetch = _useQuery.refetch;\n\n  if (loading) return __jsx(Loading, null);\n  if (error) return __jsx(\"i\", {\n    color: \"danger\"\n  }, getErrorMessage(error));\n  var allOrders = (data === null || data === void 0 ? void 0 : (_data$allOrders = data.allOrders) === null || _data$allOrders === void 0 ? void 0 : _data$allOrders.length) ? data === null || data === void 0 ? void 0 : data.allOrders : [];\n  var newOrder = newOrderVar();\n\n  if (newOrder) {\n    newOrderVar(false);\n\n    try {\n      refetch();\n    } catch (_unused) {}\n  }\n\n  return allOrders.map(function (order) {\n    return __jsx(Item, {\n      key: order.id,\n      order: order,\n      user: data.user,\n      onChange: function onChange() {\n        refetch();\n      }\n    });\n  });\n}","map":null,"metadata":{},"sourceType":"module"}