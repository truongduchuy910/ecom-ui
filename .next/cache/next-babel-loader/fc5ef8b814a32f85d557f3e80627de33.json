{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { OrderItems } from \"./orderItems\";\nimport { Row, Col } from \"reactstrap\";\nimport { formatMoney } from \"../../lib/chip\";\nimport { theme, page } from \"../../config/index\";\nimport { css } from \"../src/css\";\nimport { gql, useMutation } from \"@apollo/client\";\nconst UPDATE_step = gql`\n  mutation($id: ID!, $step: Int) {\n    updateOrder(id: $id, data: { step: $step }) {\n      id\n      step\n    }\n  }\n`;\nexport function Item({\n  order,\n  user,\n  onChange\n}) {\n  var _order$customer, _order$customer2, _order$customer3;\n\n  const [updateStep] = useMutation(UPDATE_step);\n  const stepName = [\"Đặt thành công\", \"Đã đóng gói\", \"Đã vận chuyển\"];\n  const isSeller = (user === null || user === void 0 ? void 0 : user.isSeller) == true && user.id == page.seller.id;\n\n  const onConfirm = async () => {\n    const id = order.id;\n    const step = Number(order.step) + 1;\n    const {\n      data\n    } = await updateStep({\n      variables: {\n        id,\n        step\n      }\n    });\n    onChange();\n  };\n\n  return __jsx(\"div\", {\n    style: {\n      borderRadius: 8,\n      padding: 15,\n      margin: 15,\n      backgroundColor: theme.backgroundColor\n    }\n  }, __jsx(Row, null, __jsx(Col, {\n    sm: 12,\n    md: 6\n  }, __jsx(\"div\", {\n    style: {\n      marginBottom: theme.spacing(3)\n    }\n  }, __jsx(\"h5\", {\n    style: _objectSpread(_objectSpread({}, css.h5), {}, {\n      display: \"inline-block\",\n      marginRight: theme.spacing(2)\n    })\n  }, \"\\u0110\\u1EB7t ng\\xE0y:\"), __jsx(\"a\", {\n    style: {\n      display: \"inline-block\"\n    }\n  }, new Date(order === null || order === void 0 ? void 0 : order.time).toLocaleDateString())), __jsx(\"div\", {\n    style: {\n      marginBottom: theme.spacing(3)\n    }\n  }, __jsx(\"h5\", {\n    style: css.h5\n  }, \"\\u0110\\u1ECBa Ch\\u1EC9:\"), __jsx(\"a\", {\n    style: {\n      display: \"block\"\n    }\n  }, order === null || order === void 0 ? void 0 : (_order$customer = order.customer) === null || _order$customer === void 0 ? void 0 : _order$customer.name), __jsx(\"a\", {\n    style: {\n      display: \"block\"\n    }\n  }, order === null || order === void 0 ? void 0 : (_order$customer2 = order.customer) === null || _order$customer2 === void 0 ? void 0 : _order$customer2.phone), __jsx(\"a\", {\n    style: {\n      display: \"block\"\n    }\n  }, order === null || order === void 0 ? void 0 : (_order$customer3 = order.customer) === null || _order$customer3 === void 0 ? void 0 : _order$customer3.address)), __jsx(\"div\", {\n    style: {\n      marginBottom: theme.spacing(3)\n    }\n  }, __jsx(\"h5\", {\n    style: css.h5\n  }, \"Tr\\u1EA1ng Th\\xE1i: \"), stepName.map((step, index) => index <= order.step ? __jsx(\"i\", {\n    key: index\n  }, index != 0 ? \" > \" : null, \" \", step) : null)), __jsx(\"h5\", {\n    style: _objectSpread(_objectSpread({}, css.h5), {}, {\n      display: \"inline-block\",\n      marginRight: theme.spacing(2)\n    })\n  }, \"T\\u1ED5ng:\"), __jsx(\"a\", {\n    style: {\n      marginBottom: theme.spacing(3),\n      display: \"inline-block\"\n    }\n  }, formatMoney(order.total)), isSeller && order.step < 2 ? __jsx(\"button\", {\n    style: _objectSpread({}, css.button),\n    onClick: () => {\n      onConfirm();\n    }\n  }, \"X\\xE1c Nh\\u1EADn \", stepName[Number(order.step) + 1]) : null), __jsx(Col, null, __jsx(\"div\", {\n    style: {\n      marginBottom: theme.spacing(3)\n    }\n  }, __jsx(OrderItems, {\n    items: order.items\n  })))));\n}","map":null,"metadata":{},"sourceType":"module"}