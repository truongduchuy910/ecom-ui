{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { gql, useMutation } from \"@apollo/client\";\nimport { refetchCustomer } from \"../../components/apollo/client\";\nimport { useContext } from \"react\";\nimport { SellerContext } from \"../src/SellerProvider\";\nconst CREATE_CUSTOMER = gql`\n  mutation($data: CustomerCreateInput) {\n    createCustomer(data: $data) {\n      id\n      phone\n      name\n      address\n    }\n  }\n`;\nexport function Create({\n  onCreate = () => {}\n}) {\n  const theme = useContext(SellerContext);\n  const [createCustomer] = useMutation(CREATE_CUSTOMER);\n  const refetchCus = refetchCustomer();\n\n  const submit = async e => {\n    // Prevent submit from reloading the page\n    e.preventDefault();\n    e.stopPropagation();\n    const {\n      phone,\n      name,\n      address\n    } = e.target;\n\n    if (phone.value && name.value && address.value) {\n      const {\n        data,\n        errors\n      } = await createCustomer({\n        variables: {\n          data: {\n            phone: phone.value,\n            name: name.value,\n            address: address.value,\n            ofSeller: {\n              connect: {\n                id: theme.seller.id\n              }\n            }\n          }\n        }\n      });\n      const customer = data === null || data === void 0 ? void 0 : data.createCustomer;\n\n      if (customer === null || customer === void 0 ? void 0 : customer.id) {\n        onCreate({\n          customer\n        });\n      }\n    }\n  };\n\n  return __jsx(\"form\", {\n    onSubmit: submit,\n    noValidate: true,\n    style: {\n      marginBottom: theme.spacing(3)\n    }\n  }, __jsx(\"h5\", {\n    style: _objectSpread(_objectSpread({}, theme.css.h5), {}, {\n      textTransform: \"capitalize\"\n    })\n  }, \"\\u0110i\\u1EC1n th\\xF4ng tin nh\\u1EADn h\\xE0ng\"), __jsx(\"input\", {\n    style: _objectSpread(_objectSpread({}, theme.css.input), {}, {\n      width: \"100%\",\n      marginBottom: theme.spacing(3)\n    }),\n    required: true,\n    name: \"name\",\n    placeholder: \"T\\xEAn\"\n  }), __jsx(\"input\", {\n    style: _objectSpread(_objectSpread({}, theme.css.input), {}, {\n      width: \"100%\",\n      marginBottom: theme.spacing(3)\n    }),\n    required: true,\n    name: \"phone\",\n    placeholder: \"\\u0110i\\u1EC7n Tho\\u1EA1i\",\n    type: \"number\"\n  }), __jsx(\"input\", {\n    style: _objectSpread(_objectSpread({}, theme.css.input), {}, {\n      width: \"100%\",\n      marginBottom: theme.spacing(3)\n    }),\n    required: true,\n    name: \"address\",\n    placeholder: \"\\u0110\\u1ECBa Ch\\u1EC9\"\n  }), __jsx(\"button\", {\n    style: theme.css.button,\n    type: \"submit\"\n  }, \"X\\xE1c nh\\u1EADn th\\xF4ng tin\"));\n}","map":null,"metadata":{},"sourceType":"module"}