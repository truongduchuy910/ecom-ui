{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query(\\n    $first: Int\\n    $skip: Int\\n    $attributes: AttributeGroupWhereInput\\n    $category: String\\n    $categories: [String]\\n    $brand: BrandWhereInput\\n    $orderBy: String\\n    $suggestions: ProductSuggestionType\\n    $seller: UserWhereInput\\n    $sale_gt: Int\\n    $price_from: Int\\n    $price_to: Int\\n    $keyword: String\\n    $except: String\\n  ) {\\n    allProducts(\\n      first: $first\\n      skip: $skip\\n      where: {\\n        AND: [\\n          { url_contains: $keyword }\\n          { category: { OR: [{ url: $category }, { url_in: $categories }] } }\\n          { brand: $brand }\\n          { attributeGroups_some: $attributes }\\n          { suggestions: $suggestions }\\n          { seller: $seller }\\n          { sale_gt: $sale_gt }\\n          { price_gt: $price_from }\\n          { price_lt: $price_to }\\n          { url_not: $except }\\n        ]\\n      }\\n      orderBy: $orderBy\\n    ) {\\n      id\\n      name\\n      description\\n      image {\\n        publicUrl\\n      }\\n      images {\\n        file {\\n          publicUrl\\n        }\\n      }\\n      price\\n      sale\\n      attributeGroups {\\n        id\\n        name\\n        attributes {\\n          id\\n          name\\n          url\\n        }\\n      }\\n      url\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useState, useEffect, Fragment, useContext } from \"react\";\nimport { gql, useQuery, rewriteURIForGET } from \"@apollo/client\";\nimport { Item as Product } from \"./item\";\nimport { Container, Row, Col, Spinner } from \"reactstrap\";\nimport { toSlug } from \"../../lib/chip\";\nimport { Loading } from \"../src/Loading\";\nimport { MoreProducts } from \"../UI/moreProducts\";\nimport { SellerContext } from \"../src/SellerProvider\";\nvar GET_PRODUCTS = gql(_templateObject());\nexport var List = function List(_ref) {\n  var _data$allProducts2;\n\n  var _ref$title = _ref.title,\n      title = _ref$title === void 0 ? \"\" : _ref$title,\n      _ref$first = _ref.first,\n      first = _ref$first === void 0 ? 2 : _ref$first,\n      _ref$skip = _ref.skip,\n      skip = _ref$skip === void 0 ? 0 : _ref$skip,\n      category = _ref.category,\n      categories = _ref.categories,\n      _ref$brand = _ref.brand,\n      brand = _ref$brand === void 0 ? \"\" : _ref$brand,\n      attributes = _ref.attributes,\n      orderBy = _ref.orderBy,\n      suggestions = _ref.suggestions,\n      sale = _ref.sale,\n      _ref$price_from = _ref.price_from,\n      price_from = _ref$price_from === void 0 ? 0 : _ref$price_from,\n      price_to = _ref.price_to,\n      xs = _ref.xs,\n      sm = _ref.sm,\n      md = _ref.md,\n      lg = _ref.lg,\n      xl = _ref.xl,\n      _ref$more = _ref.more,\n      more = _ref$more === void 0 ? true : _ref$more,\n      search = _ref.search,\n      except = _ref.except;\n  var theme = useContext(SellerContext);\n  var variables = {\n    first: first,\n    skip: skip,\n    category: category,\n    categories: categories,\n    brand: brand ? {\n      url_contains: brand\n    } : null,\n    attributes: attributes,\n    orderBy: orderBy,\n    suggestions: suggestions,\n    seller: theme.seller,\n    price_from: price_from,\n    price_to: price_to ? price_to : 999999999,\n    except: except\n  };\n  if (search) variables.keyword = toSlug(search);\n  if (sale) variables.sale_gt = 0;\n\n  var _useQuery = useQuery(GET_PRODUCTS, {\n    variables: variables\n  }),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      loading = _useQuery.loading,\n      fetchMore = _useQuery.fetchMore;\n\n  var _useState = useState(true),\n      on = _useState[0],\n      setOn = _useState[1];\n\n  var width = 0;\n  useEffect(function () {\n    // fetch more data\n    if (more) {\n      var productsEle = document.getElementById(\"products\"); // hight of element - scrollTop < window height ?\n\n      var alpha = function alpha() {\n        return (productsEle === null || productsEle === void 0 ? void 0 : productsEle.clientHeight) - document.scrollingElement.scrollTop - window.innerHeight + 150;\n      };\n\n      if (alpha() > 0) setOn(false); // loading done\n\n      if (on && !loading && alpha() < 0) {\n        loadingMore();\n      }\n\n      window.onscroll = function () {\n        if (alpha() < 0 && !on) setOn(true);\n      };\n    }\n\n    if (!width) width = window.innerWidth;\n  });\n\n  function loadingMore() {\n    var _data$allProducts;\n\n    var count = data === null || data === void 0 ? void 0 : (_data$allProducts = data.allProducts) === null || _data$allProducts === void 0 ? void 0 : _data$allProducts.length;\n    variables.skip = count;\n\n    try {\n      fetchMore({\n        variables: variables,\n        updateQuery: function updateQuery(prev, _ref2) {\n          var _fetchMoreResult$allP;\n\n          var fetchMoreResult = _ref2.fetchMoreResult;\n\n          if (!((_fetchMoreResult$allP = fetchMoreResult.allProducts) === null || _fetchMoreResult$allP === void 0 ? void 0 : _fetchMoreResult$allP.length)) {\n            return prev;\n          }\n\n          return Object.assign({}, prev, {\n            allProducts: [].concat(_toConsumableArray(prev.allProducts), _toConsumableArray(fetchMoreResult.allProducts))\n          });\n        }\n      });\n    } catch (e) {}\n  }\n\n  if (error || loading) return __jsx(\"div\", {\n    style: {\n      margin: theme.spacing(3)\n    }\n  }, __jsx(Loading, null));\n  return (data === null || data === void 0 ? void 0 : (_data$allProducts2 = data.allProducts) === null || _data$allProducts2 === void 0 ? void 0 : _data$allProducts2.length) ? __jsx(\"section\", {\n    id: \"products\",\n    style: {\n      paddingLeft: theme.spacing(2)\n    }\n  }, title ? __jsx(\"h2\", {\n    style: _objectSpread(_objectSpread({}, theme.css.h2), {}, {\n      textAlign: \"center\",\n      marginBottom: theme.spacing(5)\n    })\n  }, title) : null, __jsx(Row, {\n    noGutters: true\n  }, data.allProducts.map(function (product) {\n    return __jsx(Col, {\n      key: product.id,\n      xs: xs ? xs : 6,\n      sm: sm ? sm : 6,\n      md: md ? md : 4,\n      lg: lg ? lg : 3,\n      xl: xl ? xl : 2,\n      style: {\n        padding: width <= 768 && width != 0 ? 3 : theme.spacing(2),\n        paddingTop: 0\n      }\n    }, __jsx(Product, {\n      product: product\n    }));\n  }))) : __jsx(\"p\", {\n    style: {\n      textAlign: \"center\"\n    }\n  }, \"Kh\\xF4ng c\\xF3 k\\u1EBFt qu\\u1EA3!\");\n};","map":null,"metadata":{},"sourceType":"module"}