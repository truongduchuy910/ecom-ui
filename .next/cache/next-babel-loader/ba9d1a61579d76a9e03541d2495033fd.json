{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { gql, useQuery, useApolloClient } from \"@apollo/client\";\nimport { getErrorMessage } from \"../../lib/chip\";\nimport { USER } from \"../../components/apollo/action\";\nimport { newOrderVar } from \"../../components/apollo/client\";\nimport { Item } from \"./item\";\nimport { Loading } from \"../src/Loading\";\nimport { useRouter } from \"next/router\";\nexport const GET_CART_ITEMS = gql`\n  query($id: ID) {\n    user @client\n    allOrders(orderBy: \"time_DESC\", where: { id: $id }) {\n      id\n      total\n      step\n      time\n      customer {\n        id\n        name\n        phone\n        address\n      }\n      items {\n        id\n        product {\n          name\n          url\n          image {\n            publicUrl\n          }\n          images {\n            file {\n              publicUrl\n            }\n          }\n        }\n        price\n        quantity\n        attributes {\n          id\n          name\n          url\n        }\n      }\n    }\n  }\n`;\nexport function List() {\n  var _router$query, _data$allOrders;\n\n  const router = useRouter();\n  const id = (_router$query = router.query) === null || _router$query === void 0 ? void 0 : _router$query.createOrderId;\n  console.log(id);\n  const client = useApolloClient();\n  const user = client.readQuery({\n    query: USER\n  });\n  const {\n    data,\n    loading,\n    error,\n    refetch\n  } = useQuery(GET_CART_ITEMS, {\n    variables: {\n      seller: {\n        id: user === null || user === void 0 ? void 0 : user.id\n      },\n      id\n    }\n  });\n  if (loading) return __jsx(Loading, null);\n  if (error) return __jsx(\"i\", {\n    color: \"danger\"\n  }, getErrorMessage(error));\n  let allOrders = (data === null || data === void 0 ? void 0 : (_data$allOrders = data.allOrders) === null || _data$allOrders === void 0 ? void 0 : _data$allOrders.length) ? data === null || data === void 0 ? void 0 : data.allOrders : [];\n  const newOrder = newOrderVar();\n\n  if (newOrder) {\n    newOrderVar(false);\n\n    try {\n      refetch();\n    } catch {}\n  }\n\n  return allOrders.map(order => __jsx(Item, {\n    key: order.id,\n    order: order,\n    user: data.user,\n    onChange: () => {\n      refetch();\n    }\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}