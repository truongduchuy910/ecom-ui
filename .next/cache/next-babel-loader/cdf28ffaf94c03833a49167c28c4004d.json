{"ast":null,"code":"var _jsxFileName = \"/media/huy/New Volume/linux/apps/ecom-ui/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { gql, useQuery } from \"@apollo/client\";\nimport { Fragment, useContext } from \"react\";\nimport { SellerContext } from \"../apollo\";\nimport Products from \"../components/Product\";\n\nfunction Test() {\n  const theme = useContext(SellerContext);\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(gql`query($category: CategoryWhereInput) {\n        allCategories(where:$category) {\n            id\n            name\n            url\n        }\n    }`, {\n    variables: {\n      category: {\n        seller: theme.seller\n      }\n    }\n  });\n  return __jsx(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 12\n    }\n  }, data === null || data === void 0 ? void 0 : data.allCategories.map(category => {\n    return __jsx(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 20\n      }\n    }, __jsx(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 17\n      }\n    }, category.name), __jsx(Products, {\n      ProductWhereInput: {\n        category: {\n          id: category.id\n        }\n      },\n      limit: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }\n    }));\n  }));\n}\n\nexport default Test;","map":{"version":3,"sources":["/media/huy/New Volume/linux/apps/ecom-ui/pages/index.js"],"names":["gql","useQuery","Fragment","useContext","SellerContext","Products","Test","theme","data","loading","error","variables","category","seller","allCategories","map","name","id"],"mappings":";;;AAAA,SAASA,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,OAArC;AACA,SAASC,aAAT,QAA8B,WAA9B;AAEA,OAAOC,QAAP,MAAqB,uBAArB;;AACA,SAASC,IAAT,GAAgB;AACZ,QAAMC,KAAK,GAAGJ,UAAU,CAACC,aAAD,CAAxB;AACA,QAAM;AAAEI,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA2BT,QAAQ,CAACD,GAAI;;;;;;MAAL,EAMrC;AAAEW,IAAAA,SAAS,EAAE;AAAEC,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,MAAM,EAAEN,KAAK,CAACM;AAAhB;AAAZ;AAAb,GANqC,CAAzC;AAOA,SAAO,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACFL,IADE,aACFA,IADE,uBACFA,IAAI,CAAEM,aAAN,CAAoBC,GAApB,CAAwBH,QAAQ,IAAI;AACjC,WAAO,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKA,QAAQ,CAACI,IAAd,CADG,EAEH,MAAC,QAAD;AAAU,MAAA,iBAAiB,EAAE;AAAEJ,QAAAA,QAAQ,EAAE;AAAEK,UAAAA,EAAE,EAAEL,QAAQ,CAACK;AAAf;AAAZ,OAA7B;AACI,MAAA,KAAK,EAAE,CADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFG,CAAP;AAMH,GAPA,CADE,CAAP;AAWH;;AACD,eAAeX,IAAf","sourcesContent":["import { gql, useQuery } from \"@apollo/client\";\nimport { Fragment, useContext } from \"react\";\nimport { SellerContext } from \"../apollo\";\n\nimport Products from \"../components/Product\";\nfunction Test() {\n    const theme = useContext(SellerContext)\n    const { data, loading, error } = useQuery(gql`query($category: CategoryWhereInput) {\n        allCategories(where:$category) {\n            id\n            name\n            url\n        }\n    }`, { variables: { category: { seller: theme.seller } } })\n    return <Fragment>\n        {data?.allCategories.map(category => {\n            return <Fragment>\n                <h2>{category.name}</h2>\n                <Products ProductWhereInput={{ category: { id: category.id } }}\n                    limit={3} />\n            </Fragment>\n\n        })}\n    </Fragment>\n\n}\nexport default Test;"]},"metadata":{},"sourceType":"module"}