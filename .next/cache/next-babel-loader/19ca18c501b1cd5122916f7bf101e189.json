{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { gql, useQuery } from \"@apollo/client\";\nimport { Item } from \"./item\";\nimport { useContext, useState } from \"react\";\nimport { getErrorMessage } from \"../../lib/chip\";\nimport { Loading } from \"../src/Loading\";\nimport { IoIosOptions } from \"react-icons/io\";\nimport { SellerContext } from \"../src/SellerProvider\";\nconst GET_ATTRIBUTES = gql`\n  query($seller: UserWhereInput) {\n    allAttributes(where: { seller: $seller }) {\n      id\n      name\n      url\n    }\n  }\n`;\nexport function List({\n  attributes\n}) {\n  const theme = useContext(SellerContext);\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(GET_ATTRIBUTES, {\n    variables: {\n      seller: theme.seller\n    }\n  });\n  const {\n    0: open,\n    1: setOpen\n  } = useState(false);\n  if (loading) return __jsx(Loading, null);\n  if (error) return __jsx(\"i\", {\n    color: \"danger\"\n  }, getErrorMessage(error));\n  let source = attributes ? attributes : data.allAttributes;\n  return !loading && data ? __jsx(\"div\", null, __jsx(\"h5\", {\n    style: theme.css.h5\n  }, __jsx(IoIosOptions, {\n    style: theme.css.iconHeader\n  }), \"Thu\\u1ED9c T\\xEDnh\"), __jsx(Item, {\n    attribute: {\n      id: \"all-attribute\",\n      name: \"Tất Cả\",\n      url: \"all\"\n    }\n  }), source === null || source === void 0 ? void 0 : source.slice(0, open ? source === null || source === void 0 ? void 0 : source.lenght : 7).map(attribute => __jsx(Item, {\n    key: attribute.id,\n    attribute: attribute\n  })), (source === null || source === void 0 ? void 0 : source.length) > 7 ? open ? __jsx(\"a\", {\n    onClick: () => setOpen(false),\n    style: {\n      color: theme.primary\n    }\n  }, \"R\\xFAt g\\u1ECDn\") : __jsx(\"a\", {\n    onClick: () => setOpen(true),\n    style: {\n      color: theme.primary\n    }\n  }, \"Xem th\\xEAm\") : null) : null;\n}","map":null,"metadata":{},"sourceType":"module"}