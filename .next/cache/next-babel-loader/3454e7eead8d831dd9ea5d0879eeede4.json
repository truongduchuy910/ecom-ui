{"ast":null,"code":"var _jsxFileName = \"/home/huy/apps/ecom-ui/components/Cart/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { gql, useQuery, useMutation } from \"@apollo/client\";\nimport { emptyCart } from \"../../apollo/action\";\nimport { customerVar, newOrderVar, newOrderCountVar } from \"../../apollo/client\";\nimport { Item as CartItem } from \"./item\";\nimport { List } from \"./list\";\nimport { useRouter } from \"next/router\";\nimport { page } from \"../../config/index\";\nimport { formatMoney, getErrorMessage } from \"../../lib/chip\";\nimport { Fragment } from \"react\";\nimport { css } from \"../src/css\";\nimport theme from \"../src/theme\";\nimport { Loading } from \"../src/Loading\";\nimport { Link } from \"../src/Link\";\nimport { List as Customer } from \"../Customer/CurrentCustomer\";\nexport const CART = gql`\n  query {\n    cartItems @client\n    user @client\n    customer @client\n  }\n`; // create orderItem\n\nexport const CREATE_ORDER_ITEMS = gql`\n  mutation($data: [OrderItemsCreateInput]) {\n    createOrderItems(data: $data) {\n      id\n    }\n  }\n`; // create Order\n\nexport const CREATE_ORDER = gql`\n  mutation(\n    $items: [OrderItemWhereUniqueInput]\n    $customer: CustomerWhereUniqueInput\n    $ofSeller: UserWhereUniqueInput\n    $total: Int\n  ) {\n    createOrder(\n      data: {\n        customer: { connect: $customer }\n        items: { connect: $items }\n        ofSeller: { connect: $ofSeller }\n        total: $total\n      }\n    ) {\n      id\n      seller {\n        id\n        name\n      }\n      items {\n        id\n        product {\n          image {\n            publicUrl\n          }\n          images {\n            file {\n              publicUrl\n            }\n          }\n          name\n        }\n        price\n        quantity\n        attributes {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n\nconst OrderItemsCreateInput = item => ({\n  data: {\n    product: {\n      connect: {\n        id: item.product.id\n      }\n    },\n    price: item.price,\n    quantity: item.quantity\n  }\n});\n\nconst OrderItemsCreateInputs = (cartItems = []) => cartItems === null || cartItems === void 0 ? void 0 : cartItems.map(item => OrderItemsCreateInput(item));\n\nexport function Cart() {\n  const router = useRouter(); // loading data\n\n  const {\n    data: cartData,\n    loading,\n    error\n  } = useQuery(CART);\n  console.log(cartData, error, cartData);\n  if (loading || error || !cartData) return null;\n  const {\n    customer,\n    cartItems,\n    user\n  } = cartData;\n  let sum = 0;\n  cartItems === null || cartItems === void 0 ? void 0 : cartItems.map(cartItem => {\n    sum += cartItem.price;\n  }); // mutation\n\n  const [createOrderItems] = useMutation(CREATE_ORDER_ITEMS);\n  const [createOrder] = useMutation(CREATE_ORDER); // create OrderItemsCreateInputs (GraphQL type)\n\n  let dataOICI = OrderItemsCreateInputs(cartItems);\n  dataOICI === null || dataOICI === void 0 ? void 0 : dataOICI.map(data => data.data.ofSeller = {\n    connect: {\n      id: page.seller.id\n    }\n  }); // function\n\n  const order = async () => {\n    // create cart items\n    const {\n      data: dataCOI,\n      error\n    } = await createOrderItems({\n      variables: {\n        data: dataOICI\n      }\n    }); // creat cart and connect cart items\n\n    if (dataCOI.createOrderItems) {\n      let variables = {\n        items: dataCOI.createOrderItems.map(e => ({\n          id: e.id\n        })),\n        customer: {\n          id: customer.id\n        },\n        ofSeller: {\n          id: page.seller.id\n        },\n        total: sum\n      };\n\n      try {\n        const {\n          data: dataCreateOrder,\n          errors: ER\n        } = await createOrder({\n          variables\n        });\n        newOrderVar(true);\n        newOrderCountVar(true);\n        emptyCart();\n        router.push({\n          pathname: \"/order\"\n        });\n      } catch {}\n    }\n  };\n\n  return user ? __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 5\n    }\n  }, __jsx(Customer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }\n  }), __jsx(List, {\n    cartItems: cartItems,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }\n  }), (dataOICI === null || dataOICI === void 0 ? void 0 : dataOICI.length) && user ? __jsx(\"button\", {\n    style: css.button,\n    onClick: order,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }\n  }, \"X\\xE1c nh\\u1EADn \\u0111\\u01A1n h\\xE0ng\") : null) : __jsx(\"div\", {\n    style: {\n      marginBottom: theme.spacing(4)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 5\n    }\n  }, __jsx(Link, {\n    href: {\n      pathname: \"/signin\",\n      query: {\n        redirect: \"/cart\"\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }\n  }, \"B\\u1EA5m v\\xE0o \\u0111\\xE2y \\u0111\\u1EC3 \\u0111\\u0103ng nh\\u1EADp v\\xE0 ti\\u1EBFp t\\u1EE5c\"));\n}","map":{"version":3,"sources":["/home/huy/apps/ecom-ui/components/Cart/index.js"],"names":["gql","useQuery","useMutation","emptyCart","customerVar","newOrderVar","newOrderCountVar","Item","CartItem","List","useRouter","page","formatMoney","getErrorMessage","Fragment","css","theme","Loading","Link","Customer","CART","CREATE_ORDER_ITEMS","CREATE_ORDER","OrderItemsCreateInput","item","data","product","connect","id","price","quantity","OrderItemsCreateInputs","cartItems","map","Cart","router","cartData","loading","error","console","log","customer","user","sum","cartItem","createOrderItems","createOrder","dataOICI","ofSeller","seller","order","dataCOI","variables","items","e","total","dataCreateOrder","errors","ER","push","pathname","length","button","marginBottom","spacing","query","redirect"],"mappings":"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","sourcesContent":["import { gql, useQuery, useMutation } from \"@apollo/client\";\n\nimport { emptyCart } from \"../../apollo/action\";\nimport {\n  customerVar,\n  newOrderVar,\n  newOrderCountVar,\n} from \"../../apollo/client\";\nimport { Item as CartItem } from \"./item\";\nimport { List } from \"./list\";\nimport { useRouter } from \"next/router\";\nimport { page } from \"../../config/index\";\n\nimport { formatMoney, getErrorMessage } from \"../../lib/chip\";\nimport { Fragment } from \"react\";\nimport { css } from \"../src/css\";\nimport theme from \"../src/theme\";\nimport { Loading } from \"../src/Loading\";\nimport { Link } from \"../src/Link\";\nimport { List as Customer } from \"../Customer/CurrentCustomer\";\nexport const CART = gql`\n  query {\n    cartItems @client\n    user @client\n    customer @client\n  }\n`;\n// create orderItem\nexport const CREATE_ORDER_ITEMS = gql`\n  mutation($data: [OrderItemsCreateInput]) {\n    createOrderItems(data: $data) {\n      id\n    }\n  }\n`;\n\n// create Order\nexport const CREATE_ORDER = gql`\n  mutation(\n    $items: [OrderItemWhereUniqueInput]\n    $customer: CustomerWhereUniqueInput\n    $ofSeller: UserWhereUniqueInput\n    $total: Int\n  ) {\n    createOrder(\n      data: {\n        customer: { connect: $customer }\n        items: { connect: $items }\n        ofSeller: { connect: $ofSeller }\n        total: $total\n      }\n    ) {\n      id\n      seller {\n        id\n        name\n      }\n      items {\n        id\n        product {\n          image {\n            publicUrl\n          }\n          images {\n            file {\n              publicUrl\n            }\n          }\n          name\n        }\n        price\n        quantity\n        attributes {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\nconst OrderItemsCreateInput = (item) => ({\n  data: {\n    product: { connect: { id: item.product.id } },\n    price: item.price,\n    quantity: item.quantity,\n  },\n});\nconst OrderItemsCreateInputs = (cartItems = []) =>\n  cartItems?.map((item) => OrderItemsCreateInput(item));\n\nexport function Cart() {\n  const router = useRouter();\n\n  // loading data\n  const { data: cartData, loading, error } = useQuery(CART);\n  console.log(cartData, error, cartData);\n  if (loading || error || !cartData) return null;\n\n  const { customer, cartItems, user } = cartData;\n  let sum = 0;\n  cartItems?.map((cartItem) => {\n    sum += cartItem.price;\n  });\n\n  // mutation\n  const [createOrderItems] = useMutation(CREATE_ORDER_ITEMS);\n  const [createOrder] = useMutation(CREATE_ORDER);\n  // create OrderItemsCreateInputs (GraphQL type)\n  let dataOICI = OrderItemsCreateInputs(cartItems);\n  dataOICI?.map(\n    (data) => (data.data.ofSeller = { connect: { id: page.seller.id } })\n  );\n\n  // function\n  const order = async () => {\n    // create cart items\n    const { data: dataCOI, error } = await createOrderItems({\n      variables: {\n        data: dataOICI,\n      },\n    });\n    // creat cart and connect cart items\n    if (dataCOI.createOrderItems) {\n      let variables = {\n        items: dataCOI.createOrderItems.map((e) => ({\n          id: e.id,\n        })),\n        customer: { id: customer.id },\n        ofSeller: { id: page.seller.id },\n        total: sum,\n      };\n      try {\n        const { data: dataCreateOrder, errors: ER } = await createOrder({\n          variables,\n        });\n        newOrderVar(true);\n        newOrderCountVar(true);\n        emptyCart();\n        router.push({ pathname: \"/order\" });\n      } catch {}\n    }\n  };\n\n  return user ? (\n    <div>\n      <Customer />\n      <List cartItems={cartItems} />\n      {dataOICI?.length && user ? (\n        <button style={css.button} onClick={order}>\n          Xác nhận đơn hàng\n        </button>\n      ) : null}\n    </div>\n  ) : (\n    <div style={{ marginBottom: theme.spacing(4) }}>\n      <Link href={{ pathname: \"/signin\", query: { redirect: \"/cart\" } }}>\n        Bấm vào đây để đăng nhập và tiếp tục\n      </Link>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}