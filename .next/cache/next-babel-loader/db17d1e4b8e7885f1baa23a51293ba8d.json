{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useContext, useState } from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { Item } from \"./item\";\nimport { Loading } from \"../src/Loading\";\nimport { IoIosAddCircleOutline } from \"react-icons/io\";\nimport { Create } from \"./create\";\nimport { chooseCustomer } from \"../../apollo/action\";\nimport { SellerContext } from \"../src/SellerProvider\"; // get\n\nconst GET_CUSTOMERS = gql`\n  query {\n    customer @client\n    allCustomers {\n      id\n      name\n      phone\n      address\n    }\n  }\n`;\nexport function List({\n  autoSelect\n}) {\n  const theme = useContext(SellerContext);\n  const {\n    0: create,\n    1: setCreate\n  } = useState(false);\n  const {\n    data,\n    loading,\n    error,\n    refetch\n  } = useQuery(GET_CUSTOMERS);\n  if (loading || error || !data) return __jsx(Loading, null);\n  const {\n    customer,\n    allCustomers\n  } = data; // default first customer\n\n  if (!(customer === null || customer === void 0 ? void 0 : customer.id) && (allCustomers === null || allCustomers === void 0 ? void 0 : allCustomers.length) && autoSelect) chooseCustomer({\n    customer: allCustomers[0]\n  });\n  return !autoSelect && (allCustomers === null || allCustomers === void 0 ? void 0 : allCustomers.length) ? __jsx(\"div\", {\n    style: {\n      marginBottom: theme.spacing(3),\n      paddingBottom: theme.spacing(3)\n    }\n  }, create ? __jsx(Create, {\n    onCreate: ({\n      customer\n    }) => {\n      refetch();\n      chooseCustomer({\n        customer\n      });\n    }\n  }) : null, __jsx(\"h5\", {\n    style: _objectSpread(_objectSpread({}, theme.css.h5), {}, {\n      display: \"inline\",\n      marginRight: 13\n    })\n  }, \"Ch\\u1ECDn \\u0111\\u1ECBa ch\\u1EC9 b\\xEAn d\\u01B0\\u1EDBi\"), __jsx(\"label\", {\n    onClick: () => {\n      setCreate(true);\n    },\n    style: {\n      cursor: \"pointer\",\n      color: theme.color\n    }\n  }, \"Ho\\u0103c t\\u1EA1o m\\u1EDBi \", __jsx(IoIosAddCircleOutline, null)), allCustomers.map(customer => __jsx(Item, {\n    key: customer.id,\n    customer: customer,\n    onDelete: () => {\n      refetch();\n    }\n  }))) : __jsx(Create, {\n    onCreate: ({\n      customer\n    }) => {\n      refetch();\n      chooseCustomer({\n        customer\n      });\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"module"}