{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, Fragment, useReducer, useContext } from \"react\";\nimport { Create as CreateCustomer } from \"../Customer/create\";\nimport { CREATE_ORDER_ITEMS, CREATE_ORDER, CART, OrderItemsCreateInputs, order } from \".\";\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { Loading } from \"../src/Loading\";\nimport { useRouter } from \"next/router\";\nimport { SellerContext } from \"../src/SellerProvider\";\nexport const QuickCart = ({\n  cartItems\n}) => {\n  const theme = useContext(SellerContext);\n  const router = useRouter(); // query\n\n  const {\n    data: cartData,\n    loading,\n    error\n  } = useQuery(CART); // mutation\n\n  const [createOrderItems] = useMutation(CREATE_ORDER_ITEMS);\n  const [createOrder] = useMutation(CREATE_ORDER);\n  if (loading || error || !cartData) return __jsx(Loading, null);\n  const {\n    customer,\n    user\n  } = cartData;\n  let sum = 0;\n  cartItems === null || cartItems === void 0 ? void 0 : cartItems.map(cartItem => {\n    sum += cartItem.price;\n  }); // create OrderItemsCreateInputs (GraphQL type)\n\n  let dataOICI = OrderItemsCreateInputs(cartItems);\n  dataOICI === null || dataOICI === void 0 ? void 0 : dataOICI.map(data => data.data.ofSeller = {\n    connect: {\n      id: theme.seller.id\n    }\n  }); // function\n\n  return __jsx(Fragment, null, (cartItems === null || cartItems === void 0 ? void 0 : cartItems.length) ? __jsx(CreateCustomer, {\n    onCreate: ({\n      customer\n    }) => {\n      order({\n        createOrderItems,\n        createOrder,\n        dataOICI,\n        theme,\n        customer,\n        sum,\n        router\n      });\n    }\n  }) : null);\n};","map":null,"metadata":{},"sourceType":"module"}