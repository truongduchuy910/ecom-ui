{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useMemo } from \"react\";\nimport gql from \"graphql-tag\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { page } from \"../config/index\";\nimport { init } from \"./action\";\nexport const orderCountVar = makeVar(0);\nexport const newOrderVar = makeVar(false);\nexport const newOrderCountVar = makeVar();\nexport const customerVar = makeVar({\n  id: null\n});\nexport const refetchCustomer = makeVar(async () => {});\nexport let cache = new InMemoryCache();\nconst httpLink = new HttpLink({\n  uri: page.server + \"/admin/api\",\n  credentials: \"same-origin\"\n});\nconst authLink = setContext((_, {\n  headers\n}) => {\n  if (false) {\n    const token = localStorage.getItem(\"token\");\n    return {\n      headers: _objectSpread(_objectSpread({}, headers), {}, {\n        authorization: token ? `Bearer ${token}` : \"\"\n      })\n    };\n  }\n});\n\nfunction createApolloClient() {\n  return new ApolloClient({\n    ssrMode: true,\n    link: authLink.concat(httpLink),\n    cache\n  });\n}\n\nlet apolloClient;\nexport function initializeApollo(initialState = null) {\n  var _apolloClient2;\n\n  const _apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : createApolloClient();\n\n  if (initialState) {\n    _apolloClient.cache.restore(initialState);\n  }\n\n  if (true) return _apolloClient;\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n}\nexport function useApollo(initialState) {\n  const store = useMemo(() => {\n    init();\n    return initializeApollo(initialState);\n  }, [initialState]);\n  return store;\n}","map":{"version":3,"sources":["/home/huy/apps/ecom-ui/apollo/client.js"],"names":["useMemo","gql","React","ReactDOM","HttpLink","ApolloClient","InMemoryCache","page","init","orderCountVar","makeVar","newOrderVar","newOrderCountVar","customerVar","id","refetchCustomer","cache","httpLink","uri","server","credentials","authLink","setContext","_","headers","token","localStorage","getItem","authorization","createApolloClient","ssrMode","link","concat","apolloClient","initializeApollo","initialState","_apolloClient","restore","useApollo","store"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,SAASC,IAAT,QAAqB,UAArB;AACA,OAAO,MAAMC,aAAa,GAAGC,OAAO,CAAC,CAAD,CAA7B;AACP,OAAO,MAAMC,WAAW,GAAGD,OAAO,CAAC,KAAD,CAA3B;AACP,OAAO,MAAME,gBAAgB,GAAGF,OAAO,EAAhC;AACP,OAAO,MAAMG,WAAW,GAAGH,OAAO,CAAC;AAAEI,EAAAA,EAAE,EAAE;AAAN,CAAD,CAA3B;AACP,OAAO,MAAMC,eAAe,GAAGL,OAAO,CAAC,YAAY,CAAE,CAAf,CAA/B;AAEP,OAAO,IAAIM,KAAK,GAAG,IAAIV,aAAJ,EAAZ;AAEP,MAAMW,QAAQ,GAAG,IAAIb,QAAJ,CAAa;AAC5Bc,EAAAA,GAAG,EAAEX,IAAI,CAACY,MAAL,GAAc,YADS;AAE5BC,EAAAA,WAAW,EAAE;AAFe,CAAb,CAAjB;AAIA,MAAMC,QAAQ,GAAGC,UAAU,CAAC,CAACC,CAAD,EAAI;AAAEC,EAAAA;AAAF,CAAJ,KAAoB;AAC9C,aAAmC;AACjC,UAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACA,WAAO;AACLH,MAAAA,OAAO,kCACFA,OADE;AAELI,QAAAA,aAAa,EAAEH,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB;AAFtC;AADF,KAAP;AAMD;AACF,CAV0B,CAA3B;;AAWA,SAASI,kBAAT,GAA8B;AAC5B,SAAO,IAAIxB,YAAJ,CAAiB;AACtByB,IAAAA,OAAO,MADe;AAEtBC,IAAAA,IAAI,EAAEV,QAAQ,CAACW,MAAT,CAAgBf,QAAhB,CAFgB;AAGtBD,IAAAA;AAHsB,GAAjB,CAAP;AAKD;;AAED,IAAIiB,YAAJ;AACA,OAAO,SAASC,gBAAT,CAA0BC,YAAY,GAAG,IAAzC,EAA+C;AAAA;;AACpD,QAAMC,aAAa,qBAAGH,YAAH,2DAAmBJ,kBAAkB,EAAxD;;AACA,MAAIM,YAAJ,EAAkB;AAChBC,IAAAA,aAAa,CAACpB,KAAd,CAAoBqB,OAApB,CAA4BF,YAA5B;AACD;;AACD,YAAmC,OAAOC,aAAP;AACnC,MAAI,CAACH,YAAL,EAAmBA,YAAY,GAAGG,aAAf;AACnB,SAAOA,aAAP;AACD;AACD,OAAO,SAASE,SAAT,CAAmBH,YAAnB,EAAiC;AACtC,QAAMI,KAAK,GAAGvC,OAAO,CAAC,MAAM;AAC1BQ,IAAAA,IAAI;AAEJ,WAAO0B,gBAAgB,CAACC,YAAD,CAAvB;AACD,GAJoB,EAIlB,CAACA,YAAD,CAJkB,CAArB;AAKA,SAAOI,KAAP;AACD","sourcesContent":["import { useMemo } from \"react\";\nimport gql from \"graphql-tag\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { page } from \"../config/index\";\nimport { init } from \"./action\";\nexport const orderCountVar = makeVar(0);\nexport const newOrderVar = makeVar(false);\nexport const newOrderCountVar = makeVar();\nexport const customerVar = makeVar({ id: null });\nexport const refetchCustomer = makeVar(async () => {});\n\nexport let cache = new InMemoryCache();\n\nconst httpLink = new HttpLink({\n  uri: page.server + \"/admin/api\",\n  credentials: \"same-origin\",\n});\nconst authLink = setContext((_, { headers }) => {\n  if (typeof window !== \"undefined\") {\n    const token = localStorage.getItem(\"token\");\n    return {\n      headers: {\n        ...headers,\n        authorization: token ? `Bearer ${token}` : \"\",\n      },\n    };\n  }\n});\nfunction createApolloClient() {\n  return new ApolloClient({\n    ssrMode: typeof window === \"undefined\",\n    link: authLink.concat(httpLink),\n    cache,\n  });\n}\n\nlet apolloClient;\nexport function initializeApollo(initialState = null) {\n  const _apolloClient = apolloClient ?? createApolloClient();\n  if (initialState) {\n    _apolloClient.cache.restore(initialState);\n  }\n  if (typeof window === \"undefined\") return _apolloClient;\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n}\nexport function useApollo(initialState) {\n  const store = useMemo(() => {\n    init();\n\n    return initializeApollo(initialState);\n  }, [initialState]);\n  return store;\n}\n"]},"metadata":{},"sourceType":"module"}