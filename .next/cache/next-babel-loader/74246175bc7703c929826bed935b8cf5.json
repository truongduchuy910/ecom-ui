{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query($category: String, $attributes: [String]) {\\n    allCategories(where: { url: $category }) {\\n      id\\n      name\\n      url\\n    }\\n    allAttributes(where: { url_in: $attributes }) {\\n      id\\n      name\\n      url\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { Fragment } from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { Item as Category } from \"../Category/item\";\nimport { Item as Attribute } from \"../Attribute/item\";\nimport { formatMoney } from \"../../lib/chip\";\nvar GET_CATE = gql(_templateObject());\nexport var Filter = function Filter(_ref) {\n  var _ref$category = _ref.category,\n      category = _ref$category === void 0 ? \"-\" : _ref$category,\n      brand = _ref.brand,\n      search = _ref.search,\n      price_from = _ref.price_from,\n      price_to = _ref.price_to,\n      attributes = _ref.attributes;\n  var variables = {\n    category: category,\n    attributes: attributes\n  };\n  console.log(variables);\n\n  var _useQuery = useQuery(GET_CATE, {\n    variables: variables\n  }),\n      data = _useQuery.data,\n      error = _useQuery.error;\n\n  console.log(data, error);\n  return __jsx(Fragment, null, search ? __jsx(\"label\", null, \"T\\xECm ki\\u1EBFm: \", search) : null, price_to != 999999999 ? __jsx(\"label\", null, \"Gi\\xE1 t\\u1EEB \", formatMoney(price_from), \" \\u0111\\u1EBFn \", formatMoney(price_to)) : null, (data === null || data === void 0 ? void 0 : data.allCategories.length) ? __jsx(Fragment, null, __jsx(Category, {\n    categories: (data === null || data === void 0 ? void 0 : data.allCategories) || []\n  })) : null, data === null || data === void 0 ? void 0 : data.allAttributes.map(function (attribute) {\n    return __jsx(Attribute, {\n      key: attribute.id,\n      attribute: attribute,\n      style: {\n        display: \"inline\",\n        marginRight: 8\n      }\n    });\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}