{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect, Fragment } from \"react\";\nimport { gql, useQuery, rewriteURIForGET } from \"@apollo/client\";\nimport { useRouter, withRouter, Router } from \"next/router\";\nimport { Item as Product } from \"./item\";\nimport { Container, Row, Col, Spinner } from \"reactstrap\";\nimport { page } from \"../../config/index\";\nimport { toSlug } from \"../../lib/chip\";\nimport { Loading } from \"../src/Loading\";\nimport { Divider } from \"../src/Divider\";\nimport { useSpring } from \"react-spring\";\nimport { MdExpandMore } from \"react-icons/md\";\nimport { theme } from \"../../config/index\";\nimport { Filter } from \"./filter\";\nconst GET_PRODUCTS = gql`\n  query(\n    $first: Int\n    $skip: Int\n    $attributes: AttributeGroupWhereInput\n    $category: String\n    $categories: [String]\n    $brand: BrandWhereInput\n    $orderBy: String\n    $suggestions: ProductSuggestionType\n    $seller: UserWhereInput\n    $sale_gt: Int\n    $price_from: Int\n    $price_to: Int\n    $keyword: String\n    $except: String\n  ) {\n    allProducts(\n      first: $first\n      skip: $skip\n      where: {\n        AND: [\n          { url_contains: $keyword }\n          { category: { OR: [{ url: $category }, { url_in: $categories }] } }\n          { brand: $brand }\n          { attributeGroups_some: $attributes }\n          { suggestions: $suggestions }\n          { seller: $seller }\n          { sale_gt: $sale_gt }\n          { price_gt: $price_from }\n          { price_lt: $price_to }\n          { url_not: $except }\n        ]\n      }\n      orderBy: $orderBy\n    ) {\n      id\n      name\n      description\n      image {\n        publicUrl\n      }\n      images {\n        file {\n          publicUrl\n        }\n      }\n      price\n      sale\n      attributeGroups {\n        id\n        name\n        attributes {\n          id\n          name\n          url\n        }\n      }\n      url\n    }\n  }\n`;\nexport const List = ({\n  first = 2,\n  skip = 0,\n  category,\n  categories,\n  brand = \"\",\n  attributes,\n  orderBy,\n  suggestions,\n  sale,\n  price_from = 0,\n  price_to,\n  xs,\n  sm,\n  md,\n  lg,\n  xl,\n  more = true,\n  search,\n  except\n}) => {\n  var _data$allProducts2;\n\n  let variables = {\n    first,\n    skip,\n    category,\n    categories,\n    brand: brand ? {\n      url_contains: brand\n    } : null,\n    attributes,\n    orderBy,\n    suggestions,\n    seller: page.seller,\n    price_from,\n    price_to: price_to ? price_to : 999999999,\n    except\n  };\n  if (search) variables.keyword = toSlug(search);\n  if (sale) variables.sale_gt = 0;\n  let {\n    data,\n    error,\n    loading,\n    fetchMore\n  } = useQuery(GET_PRODUCTS, {\n    variables\n  });\n  let {\n    0: on,\n    1: setOn\n  } = useState(true);\n  let width = 0;\n  useEffect(() => {\n    // fetch more data\n    if (more) {\n      const productsEle = document.getElementById(\"products\"); // hight of element - scrollTop < window height ?\n\n      const alpha = () => (productsEle === null || productsEle === void 0 ? void 0 : productsEle.clientHeight) - document.scrollingElement.scrollTop - window.innerHeight + 150;\n\n      if (alpha() > 0) setOn(false); // loading done\n\n      if (on && !loading && alpha() < 0) {\n        loadingMore();\n      }\n\n      window.onscroll = () => {\n        if (alpha() < 0 && !on) setOn(true);\n      };\n    }\n\n    if (!width) width = window.innerWidth;\n  });\n\n  function loadingMore() {\n    var _data$allProducts;\n\n    const count = data === null || data === void 0 ? void 0 : (_data$allProducts = data.allProducts) === null || _data$allProducts === void 0 ? void 0 : _data$allProducts.length;\n    variables.skip = count;\n\n    try {\n      fetchMore({\n        variables,\n        updateQuery: (prev, {\n          fetchMoreResult\n        }) => {\n          var _fetchMoreResult$allP;\n\n          if (!((_fetchMoreResult$allP = fetchMoreResult.allProducts) === null || _fetchMoreResult$allP === void 0 ? void 0 : _fetchMoreResult$allP.length)) {\n            return prev;\n          }\n\n          return Object.assign({}, prev, {\n            allProducts: [...prev.allProducts, ...fetchMoreResult.allProducts]\n          });\n        }\n      });\n    } catch (e) {}\n  }\n\n  if (error || loading) return __jsx(Loading, null);\n  return (data === null || data === void 0 ? void 0 : (_data$allProducts2 = data.allProducts) === null || _data$allProducts2 === void 0 ? void 0 : _data$allProducts2.length) ? __jsx(\"section\", {\n    id: \"products\",\n    style: {\n      paddingLeft: theme.spacing(2)\n    }\n  }, __jsx(Row, {\n    noGutters: true\n  }, data.allProducts.map(product => __jsx(Col, {\n    key: product.id,\n    xs: xs ? xs : 6,\n    sm: sm ? sm : 6,\n    md: md ? md : 4,\n    lg: lg ? lg : 3,\n    xl: xl ? xl : 2,\n    style: {\n      padding: width <= 768 && width != 0 ? 3 : theme.spacing(2)\n    }\n  }, __jsx(Product, {\n    product: product\n  }))))) : __jsx(\"p\", {\n    style: {\n      textAlign: \"center\"\n    }\n  }, \"Kh\\xF4ng c\\xF3 k\\u1EBFt qu\\u1EA3!\");\n};","map":null,"metadata":{},"sourceType":"module"}