{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query($seller: UserWhereInput) {\\n    allBrands(where: { seller: $seller }) {\\n      id\\n      name\\n      url\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql, useQuery } from \"@apollo/client\";\nimport { useRouter, withRouter } from \"next/router\";\nimport { Item } from \"./item\";\nimport { Fragment } from \"react\";\nimport Link from \"next/link\";\nimport { queryVar } from \"../../apollo/action\";\nimport { route } from \"next/dist/next-server/server/router\";\nimport { page } from \"../../config/yensaodatquang.json\";\nimport { Spinner, Alert } from \"reactstrap\";\nimport { getErrorMessage } from \"../../lib/chip\";\nimport { Loading } from \"../src/Loading\";\nvar GET_CATEGORIES = gql(_templateObject());\nexport function List() {\n  var _useQuery = useQuery(GET_CATEGORIES, {\n    variables: {\n      seller: page.seller\n    }\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error;\n\n  if (loading) return __jsx(Loading, null);\n  if (error) return __jsx(\"i\", {\n    color: \"danger\"\n  }, getErrorMessage(error));\n  return !loading && data ? __jsx(\"div\", null, __jsx(\"h5\", null, \"Th\\u01B0\\u01A1ng Hi\\u1EC7u\"), __jsx(Item, {\n    brand: {\n      id: \"all-brand\",\n      name: \"Tất Cả \",\n      url: \"all\"\n    }\n  }), data.allBrands.map(function (brand) {\n    return __jsx(Item, {\n      key: brand.id,\n      brand: brand\n    });\n  })) : null;\n}","map":null,"metadata":{},"sourceType":"module"}