{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"/home/huy/apps/ecom-ui/components/Sidebar/filter.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query($category: String, $attributes: [String]) {\\n    allCategories(where: { url: $category }) {\\n      id\\n      name\\n      url\\n    }\\n    allAttributes(where: { url_in: $attributes }) {\\n      id\\n      name\\n      url\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { Fragment } from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { Item as Category } from \"../Category/item\";\nimport { Item as Attributes } from \"../Attribute/item\";\nvar GET_CATE = gql(_templateObject());\nexport var Filter = function Filter(_ref) {\n  _s();\n\n  var _ref$category = _ref.category,\n      category = _ref$category === void 0 ? \"-\" : _ref$category,\n      brand = _ref.brand,\n      search = _ref.search,\n      price_from = _ref.price_from,\n      price_to = _ref.price_to,\n      attributes = _ref.attributes;\n  console.log(attributes);\n  var variables = {\n    category: category,\n    attributes: attributes ? attributes === null || attributes === void 0 ? void 0 : attributes.map(function (attr) {\n      return attr.id;\n    }) : []\n  };\n\n  var _useQuery = useQuery(GET_CATE, {\n    variables: variables\n  }),\n      data = _useQuery.data,\n      error = _useQuery.error;\n\n  console.log(data, error);\n  return __jsx(Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, __jsx(Category, {\n    categories: (data === null || data === void 0 ? void 0 : data.allCategories) || [],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(Filter, \"jnKEiAG78WqeE0AS5/bjUCg4uK4=\", false, function () {\n  return [useQuery];\n});\n\n_c = Filter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Filter\");","map":{"version":3,"sources":["/home/huy/apps/ecom-ui/components/Sidebar/filter.js"],"names":["Fragment","gql","useQuery","Item","Category","Attributes","GET_CATE","Filter","category","brand","search","price_from","price_to","attributes","console","log","variables","map","attr","id","data","error","allCategories"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AACA,SAASC,IAAI,IAAIC,QAAjB,QAAiC,kBAAjC;AACA,SAASD,IAAI,IAAIE,UAAjB,QAAmC,mBAAnC;AACA,IAAMC,QAAQ,GAAGL,GAAH,mBAAd;AAcA,OAAO,IAAMM,MAAM,GAAG,SAATA,MAAS,OAOhB;AAAA;;AAAA,2BANJC,QAMI;AAAA,MANJA,QAMI,8BANO,GAMP;AAAA,MALJC,KAKI,QALJA,KAKI;AAAA,MAJJC,MAII,QAJJA,MAII;AAAA,MAHJC,UAGI,QAHJA,UAGI;AAAA,MAFJC,QAEI,QAFJA,QAEI;AAAA,MADJC,UACI,QADJA,UACI;AACJC,EAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACA,MAAMG,SAAS,GAAG;AAChBR,IAAAA,QAAQ,EAARA,QADgB;AAEhBK,IAAAA,UAAU,EAAEA,UAAU,GAAGA,UAAH,aAAGA,UAAH,uBAAGA,UAAU,CAAEI,GAAZ,CAAgB,UAACC,IAAD;AAAA,aAAUA,IAAI,CAACC,EAAf;AAAA,KAAhB,CAAH,GAAwC;AAF9C,GAAlB;;AAFI,kBAMoBjB,QAAQ,CAACI,QAAD,EAAW;AACzCU,IAAAA,SAAS,EAATA;AADyC,GAAX,CAN5B;AAAA,MAMII,IANJ,aAMIA,IANJ;AAAA,MAMUC,KANV,aAMUA,KANV;;AASJP,EAAAA,OAAO,CAACC,GAAR,CAAYK,IAAZ,EAAkBC,KAAlB;AAEA,SACE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD;AAAU,IAAA,UAAU,EAAE,CAAAD,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEE,aAAN,KAAuB,EAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CAvBM;;GAAMf,M;UAaaL,Q;;;KAbbK,M","sourcesContent":["import { Fragment } from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { Item as Category } from \"../Category/item\";\nimport { Item as Attributes } from \"../Attribute/item\";\nconst GET_CATE = gql`\n  query($category: String, $attributes: [String]) {\n    allCategories(where: { url: $category }) {\n      id\n      name\n      url\n    }\n    allAttributes(where: { url_in: $attributes }) {\n      id\n      name\n      url\n    }\n  }\n`;\nexport const Filter = ({\n  category = \"-\",\n  brand,\n  search,\n  price_from,\n  price_to,\n  attributes,\n}) => {\n  console.log(attributes);\n  const variables = {\n    category,\n    attributes: attributes ? attributes?.map((attr) => attr.id) : [],\n  };\n  const { data, error } = useQuery(GET_CATE, {\n    variables,\n  });\n  console.log(data, error);\n\n  return (\n    <Fragment>\n      <Category categories={data?.allCategories || []} />\n    </Fragment>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}