{"ast":null,"code":"var _jsxFileName = \"/home/huy/apps/ecom-ui/components/Cart/quickCart.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, Fragment } from \"react\";\nimport { Create as CreateCustomer } from \"../Customer/create\";\nimport { CREATE_ORDER_ITEMS, CREATE_ORDER, CART } from \".\";\nimport { useMutation } from \"@apollo/client\";\nexport const QuickCart = ({\n  onClick\n}) => {\n  // query\n  const {\n    data: cartData,\n    loading,\n    error\n  } = useQuery(CART); // mutation\n\n  const [createOrderItems] = useMutation(CREATE_ORDER_ITEMS);\n  const [createOrder] = useMutation(CREATE_ORDER);\n  if (loading || error || !cartData) return __jsx(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 45\n    }\n  });\n  const {\n    cartItems\n  } = cartData;\n  let sum = 0;\n  cartItems === null || cartItems === void 0 ? void 0 : cartItems.map(cartItem => {\n    sum += cartItem.price;\n  }); // create OrderItemsCreateInputs (GraphQL type)\n\n  let dataOICI = OrderItemsCreateInputs(cartItems);\n  dataOICI === null || dataOICI === void 0 ? void 0 : dataOICI.map(data => data.data.ofSeller = {\n    connect: {\n      id: page.seller.id\n    }\n  });\n\n  const order = async ({\n    customer\n  }) => {\n    // create cart items\n    const {\n      data: dataCOI,\n      error\n    } = await createOrderItems({\n      variables: {\n        data: dataOICI\n      }\n    }); // creat cart and connect cart items\n\n    if (dataCOI.createOrderItems) {\n      let variables = {\n        items: dataCOI.createOrderItems.map(e => ({\n          id: e.id\n        })),\n        customer: {\n          id: customer.id\n        },\n        ofSeller: {\n          id: page.seller.id\n        },\n        total: sum\n      };\n\n      try {\n        const {\n          data: dataCreateOrder,\n          errors: ER\n        } = await createOrder({\n          variables\n        });\n        newOrderVar(true);\n        newOrderCountVar(true);\n        emptyCart();\n        router.push({\n          pathname: \"/order\"\n        });\n      } catch {}\n    }\n  };\n\n  return __jsx(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, __jsx(CreateCustomer, {\n    onCreate: ({\n      customer\n    }) => {\n      order({\n        createOrderItems,\n        createOrder,\n        dataOICI,\n        page,\n        customer\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }));\n};","map":{"version":3,"sources":["/home/huy/apps/ecom-ui/components/Cart/quickCart.js"],"names":["useState","Fragment","Create","CreateCustomer","CREATE_ORDER_ITEMS","CREATE_ORDER","CART","useMutation","QuickCart","onClick","data","cartData","loading","error","useQuery","createOrderItems","createOrder","cartItems","sum","map","cartItem","price","dataOICI","OrderItemsCreateInputs","ofSeller","connect","id","page","seller","order","customer","dataCOI","variables","items","e","total","dataCreateOrder","errors","ER","newOrderVar","newOrderCountVar","emptyCart","router","push","pathname"],"mappings":"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","sourcesContent":["import { useState, Fragment } from \"react\";\n\nimport { Create as CreateCustomer } from \"../Customer/create\";\nimport { CREATE_ORDER_ITEMS, CREATE_ORDER, CART } from \".\";\nimport { useMutation } from \"@apollo/client\";\nexport const QuickCart = ({ onClick }) => {\n  // query\n  const { data: cartData, loading, error } = useQuery(CART);\n  // mutation\n  const [createOrderItems] = useMutation(CREATE_ORDER_ITEMS);\n  const [createOrder] = useMutation(CREATE_ORDER);\n\n  if (loading || error || !cartData) return <Loading />;\n\n  const { cartItems } = cartData;\n  let sum = 0;\n  cartItems?.map((cartItem) => {\n    sum += cartItem.price;\n  });\n\n  // create OrderItemsCreateInputs (GraphQL type)\n  let dataOICI = OrderItemsCreateInputs(cartItems);\n  dataOICI?.map(\n    (data) => (data.data.ofSeller = { connect: { id: page.seller.id } })\n  );\n  const order = async ({ customer }) => {\n    // create cart items\n    const { data: dataCOI, error } = await createOrderItems({\n      variables: {\n        data: dataOICI,\n      },\n    });\n    // creat cart and connect cart items\n    if (dataCOI.createOrderItems) {\n      let variables = {\n        items: dataCOI.createOrderItems.map((e) => ({\n          id: e.id,\n        })),\n        customer: { id: customer.id },\n        ofSeller: { id: page.seller.id },\n        total: sum,\n      };\n      try {\n        const { data: dataCreateOrder, errors: ER } = await createOrder({\n          variables,\n        });\n        newOrderVar(true);\n        newOrderCountVar(true);\n        emptyCart();\n        router.push({ pathname: \"/order\" });\n      } catch {}\n    }\n  };\n  return (\n    <Fragment>\n      <CreateCustomer\n        onCreate={({ customer }) => {\n          order({ createOrderItems, createOrder, dataOICI, page, customer });\n        }}\n      />\n    </Fragment>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}